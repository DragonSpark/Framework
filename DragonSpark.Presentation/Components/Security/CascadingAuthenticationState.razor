@implements IDisposable
@inject AuthenticationStateProvider Provider

<CascadingValue Value="@_task" ChildContent="@ChildContent"/>

@code
{
	Task<AuthenticationState>? _task;
	AuthenticationStateChangedHandler _handler = null!;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	protected override void OnInitialized()
	{
        _handler = OnAuthenticationStateChanged;
		Provider.AuthenticationStateChanged += _handler;

		_task = Provider.GetAuthenticationStateAsync();
	}

	protected override Task OnParametersSetAsync() => _task ?? base.OnParametersSetAsync();

	void OnAuthenticationStateChanged(Task<AuthenticationState> _)
	{
		InvokeAsync(() =>
		            {
                        var task = Provider.GetAuthenticationStateAsync();
                        if (_task != task)
                        {
                            _task = task;
                            StateHasChanged();
                        }
		            });
	}

	void IDisposable.Dispose()
	{
		Provider.AuthenticationStateChanged -= _handler;
	}
}