@using DragonSpark.Application.Security.Identity.Authentication
@using DragonSpark.Compose
@using DragonSpark.Presentation.Environment
@using DragonSpark.Presentation.Security.Identity
@using DragonSpark.Application
@typeparam T where T : DragonSpark.Application.Security.Identity.IdentityUser

@inject ContextMemory Memory
@inject ContextStore Store

@if (State != null)
{
	@ChildContent(State)
}

@code
{
	[Parameter]
	public RenderFragment<AuthenticationState<T>> ChildContent { get; set; } = default!;

	[CascadingParameter]
	Task<AuthenticationState> Operation { get; set; } = default!;

	AuthenticationState<T>? State { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		var state = Operation.IsCompletedSuccessfully ? Operation.Result : await Operation;
		State = state.To<AuthenticationState<T>>();
	}
}