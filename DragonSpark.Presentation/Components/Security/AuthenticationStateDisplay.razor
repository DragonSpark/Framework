@using DragonSpark.Application.Security.Identity.Authentication
@using DragonSpark.Compose
@using DragonSpark.Presentation.Environment
@using DragonSpark.Presentation.Security.Identity
@using DragonSpark.Application

@typeparam T where T : DragonSpark.Application.Security.Identity.IdentityUser

@inject CurrentProfileStatus Store

@if (_state is not null)
{
    <CascadingValue TValue="ProfileStatus" Value="@_status" IsFixed="true">
        @ChildContent(_state)
    </CascadingValue>
}

@code
{
    AuthenticationState<T>? _state;
    ProfileStatus _status;

    [Parameter]
    public RenderFragment<AuthenticationState<T>> ChildContent { get; set; } = default!;

    [CascadingParameter]
    Task<AuthenticationState> Operation 
    {
        get => _operation;
        set
        {
            if (_operation != value)
            {
                _operation = value;
                _state = null;
            }
        }
    }	Task<AuthenticationState> _operation = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (_operation.Account() is not null && _state is null)
        {
            var state = Operation.IsCompletedSuccessfully ? Operation.Result : await Operation;
            _state = state.To<AuthenticationState<T>>();
            _status = GetProfileStatus.Default.Get(_state);
            Store.Execute(_status);
        }
    }
}