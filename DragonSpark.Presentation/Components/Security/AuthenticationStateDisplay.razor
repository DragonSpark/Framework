@using DragonSpark.Application.Security.Identity.Authentication
@using DragonSpark.Compose
@using DragonSpark.Presentation.Environment
@using DragonSpark.Presentation.Security.Identity
@using DragonSpark.Application
@using DragonSpark.Application.Navigation
@using DragonSpark.Application.Security.Identity.Model
@using DragonSpark.Model.Results

@typeparam T where T : DragonSpark.Application.Security.Identity.IdentityUser

@inject IValidationServices Validation
@inject AuthenticationStore Set
@inject SignOutCurrentPath SignOut
@inject CurrentProfileStatus Store

@if (_scene is not null)
{
    <CascadingValue TValue="ProfileStatus" Value="@_status" ChildContent="@_scene" />
}

@code
{
    readonly Switch _update = new();
    AuthenticationState<T>? _state;
    ProfileStatus _status;
    RenderFragment? _scene;

    protected override async Task OnInitializedAsync()
    {
        var current = await Operation;
        if (!await Validation.Get(current.User))
        {
            Set.Execute(AuthenticationState<T>.Default);
            SignOut.Execute();
        }
    }

    [Parameter]
    public RenderFragment<AuthenticationState<T>> ChildContent { get; set; } = default!;

    [CascadingParameter]
    Task<AuthenticationState> Operation
    {
        get => _operation;
        set
        {
            if (_operation != value)
            {
                _operation = value;
                _update.Up();
            }
        }
    }   Task<AuthenticationState> _operation = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (_operation.Account() is not null && _update.Down())
        {
            // ReSharper disable once AsyncApostle.AsyncWait
            var state = Operation.IsCompletedSuccessfully ? Operation.Result : await Operation;
            if (state != _state)
            {
                var next = state.To<AuthenticationState<T>>();
                if (_state is null
                    || _state.User.IsAuthenticated() != state.User.IsAuthenticated()
                    || _state.Profile?.SecurityStamp != next.Profile?.SecurityStamp)
                {
                    _state = next;
                    _status = GetProfileStatus.Default.Get(_state);
                    Store.Execute(_status);
                    _scene = ChildContent(_state);
                }
            }
        }
    }
}