@using DragonSpark.Application.AspNet.Entities.Queries.Runtime.Pagination
@using DragonSpark.Application.AspNet.Entities.Queries.Runtime.Shape
@using DragonSpark.Compose
@using DragonSpark.Model.Operations.Results

@typeparam T

@inherits Templates.ManyActiveContentTemplateComponentBase<Page<T>>

<ResultingContentView Content="@_subject"
                      LoadingTemplate="@LoadingTemplate"
                      NotFoundTemplate="@NotFoundTemplate"
                      ExceptionTemplate="@ExceptionTemplate">
    @if (context.Count > 0)
    {
        @ChildContent(context)
    }
    else
    {
        @EmptyElementsTemplate
    }
</ResultingContentView>

@code {
    IResulting<Page<T>>? _subject;

    [Parameter]
    public IPages<T> Input
    {
        get;
        set
        {
            if (field != value)
            {
                field    = value;
                _subject = null;
            }
        }
    } = null!;

    [Parameter]
    public bool IncludeTotalCount
    {
        get;
        set
        {
            if (field != value)
            {
                field    = value;
                _subject = null;
            }
        }
    }

    [Parameter]
    public string? OrderBy
    {
        get;
        set
        {
            if (field != value)
            {
                field    = value;
                _subject = null;
            }
        }
    }

    [Parameter]
    public string? Filter
    {
        get;
        set
        {
            if (field != value)
            {
                field    = value;
                _subject = null;
            }
        }
    }

    [Parameter]
    public Partition? Partition
    {
        get;
        set
        {
            if (field != value)
            {
                field    = value;
                _subject = null;
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _subject ??= Input.Then().Bind(new PageInput(IncludeTotalCount, OrderBy, Filter, Partition)).Out();
    }
}