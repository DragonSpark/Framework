@typeparam T

@using DragonSpark.Compose
@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation.Components.Eventing
@using DragonSpark.Application.Diagnostics
@using DragonSpark.Application

@inherits DragonSpark.Presentation.Components.Content.Templates.ManyActiveContentTemplateComponentBase<IPaging<T>>

<ReportingContentView Content="@Subject"
	LoadingTemplate="@LoadingTemplate"
	NotFoundTemplate="@NotFoundTemplate"
	ExceptionTemplate="@ExceptionTemplate"
	ReportedType="@ReportedType"
>
	@if (context != EmptyPaging<T>.Default)
	{
		@ChildContent(context)
	}
	else
	{
		@EmptyElementsTemplate
	}
</ReportingContentView>

@code
{
	[Parameter]
	public IQueries<T>? Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				Subject = null;
			}
		}
	}	IQueries<T>? _content;

	[Parameter]
	public ICompose<T> Compose
	{
		get => _compose;
		set
		{
			if (_compose != value)
			{
				_compose = value;
				Subject = null;
			}
		}
	}	ICompose<T> _compose = DefaultCompose<T>.Default;

	[Parameter]
	public IPagers<T> Pagers
	{
		get => _pagers;
		set
		{
			if (_pagers != value)
			{
				_pagers = value;
				Subject = null;
			}
		}
	}	IPagers<T> _pagers = Pagers<T>.Default;

	[Parameter]
	public Type? ReportedType { get; set; }

	IResulting<IPaging<T>?>? Subject { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= DetermineSubject();
	}

	IResulting<IPaging<T>?> DetermineSubject()
	{
		if (Content != null)
		{
			var result = new Pagings<T>(Pagers).Then()
			                                   .AccountOut()
			                                   .Bind(new PagingInput<T>(Content, Compose))
			                                   .Then()
			                                   .Handle(Exceptions, ReportedType ?? GetType())
			                                   .Out();
			return result;
		}

		return Defaulting<IPaging<T>>.Default;
	}
}