@*
    // ATTRIBUTION: https://github.com/meziantou/Meziantou.Framework/blob/5cc4602de6ca4a7cf0caf23c57259cc60e46cf83/src/Meziantou.AspNetCore.Components/InfiniteScrolling/InfiniteScrolling.razor
*@
@using DragonSpark.Application.AspNet.Entities.Queries.Runtime.Pagination
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Model.Results
@using DragonSpark.Presentation.Environment.Browser
@using System.Threading

@typeparam T
@inherits Templates.ActiveContentTemplateComponentBase<T>
@implements IAsyncDisposable
@implements IOperation

@inject Virtualization Model

@foreach (var item in _items)
{
    @ChildContent(item)
}

@if (_loading)
{
    @LoadingTemplate
}

<div @ref="_element" style="width: 1px;height: 1px"></div>

@code {
    readonly Switch _reload = new(), _notify = new();
    readonly List<T> _items = new();
    ElementReference? _element;
    IJSObjectReference? _instance;
    bool _loading, _complete, _active = true;
    CancellationTokenSource? _source;
    IOperation? _dispose;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _dispose = new ConnectionAware(this);
    }

    [Parameter]
    public IPages<T> Input
    {
        get => _input;
        set
        {
            if (_input != value)
            {
                _input = value;
                if (_items.Count > 0)
                {
                    _reload.Up();
                }
                _items.Clear();
                _source?.Cancel();
                _source = null;
                _complete = _loading = false;
            }
        }
    }   IPages<T> _input = default!;

    [Parameter]
    public string? OrderBy { get; set; }

    [Parameter]
    public string? Filter { get; set; }

    [Parameter]
    public ushort PageSize { get; set; } = DefaultPageSize.Default;

    [Parameter]
    public RenderDirection Direction { get; set; }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (!_complete && !_loading)
        {
            _loading =   true;
            _source  ??= new();

            StateHasChanged();
            try
            {
                var page = await Input.Get(new(true, OrderBy, Filter, new(_items.Count, PageSize), _source.Token));
                if (!_source?.IsCancellationRequested ?? false)
                {
                    await Load(page);
                }
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == _source?.Token) {}
            finally
            {
                _loading = false;
            }

            StateHasChanged();
        }
    }

    async Task Load(Page<T> page)
    {
        if (page.Count > 0)
        {
            _items.AddRange(page);
        }

        if (_items.Count < (int)page.Total.Value())
        {
            await Notify().Off();
        }
        else
        {
            _complete = true;
        }
    }

    async Task Notify()
    {
        if (_instance is not null)
        {
            await _instance.InvokeVoidAsync("onNewItems").Off();
        }
        else
        {
            _notify.Up();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _instance ??= _active && _element is not null ? await Instance(_element.Value) : null;
        if (_instance is not null)
        {
            if(_notify.Down())
            {
                await Notify().Off();
            }

            if (_reload.Down())
            {
                await LoadMoreItems().Off();
            }
        }
    }

    async Task<IJSObjectReference?> Instance(ElementReference parameter)
    {
        var result = await Model.Off(new(parameter, DotNetObjectReference.Create(this), (byte)Direction));
        _active &= result is not null;
        return result;
    }

    public ValueTask DisposeAsync() => _dispose?.Get() ?? ValueTask.CompletedTask;

    public async ValueTask Get()
    {
        _active = false;
        if (_source != null)
        {
            _source.Dispose();
            _source = null;
        }

        if (_instance != null)
        {
            await _instance.DisposeAsync();
            _instance = null;
        }
    }
}