@using DragonSpark.Compose

@implements IDisposable

<RefreshObjectMonitor Topic="@Topic" Updated="@OnUpdate" />

<CascadingValue Value="@_subject" IsFixed="@Fixed" ChildContent="@ChildContent" />

@code {
    readonly HashSet<IRefreshAware> _children = new ();

    IRefreshContainer _subject = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _subject = new State.RefreshContainer(_children);
    }

    [Parameter]
    public object Topic { get; set; } = default!;

    [Parameter]
    public bool Fixed { get; set; } = true;

	[Parameter]
	public RenderFragment ChildContent { get; set; } = default!;

	async Task OnUpdate(object _)
	{
        foreach (var item in _children)
		{
			await item.Await();
		}
	}

	public void Dispose()
	{
		_children.Clear();
	}
}
