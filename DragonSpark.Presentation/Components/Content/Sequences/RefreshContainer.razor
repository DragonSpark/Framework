@using DragonSpark.Presentation.Components.Eventing
@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Compose
@using NetFabric.Hyperlinq
@using System.Buffers

@implements IDisposable

<RefreshObjectMonitor Topic="@Topic" Updated="@OnUpdate" />

<CascadingValue Value="@Subject" IsFixed="@Fixed">
	@ChildContent
</CascadingValue>

@code {
    readonly ICollection<IRefreshAware> _children = new List<IRefreshAware>();

    IRefreshContainer Subject { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Subject = new State.RefreshContainer(_children);
    }

    [Parameter]
    public object Topic 
    {
        get => _topic;
        set
        {
            if (_topic != value)
            {
                _topic = value;
                _children.Clear();
            }
        }
    }	object _topic = default!;

    [Parameter]
    public bool Fixed { get; set; } = true;

	[Parameter]
	public RenderFragment ChildContent { get; set; } = default!;

	async Task OnUpdate(object _)
	{
	    using var lease = _children.AsValueEnumerable().ToArray(ArrayPool<IRefreshAware>.Shared);
	    foreach (var item in lease)
		{
			await item.Await();
		}
	}

	public void Dispose()
	{
		_children.Clear();
	}
}
