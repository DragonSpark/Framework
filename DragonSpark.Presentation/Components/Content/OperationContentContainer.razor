@typeparam T

@using DragonSpark.Compose
@using DragonSpark.Model.Operations

@inherits ActiveContentTemplateComponentBase<T>

@if (Subject is null)
{
	@NotAssignedTemplate
}
else if (Subject is { IsFaulted : true })
{
	@ExceptionTemplate
}
else if (Fragment != null)
{
	@Fragment
}
else
{
	@LoadingTemplate
}

@code
{
	[Parameter]
	public IResulting<T?>? Content
	{
		get => _content;
		set
		{
			if (_content != value && value is not null)
			{
				_content = value;
				Loaded = false;
				Subject = null;
			}
		}
	}	IResulting<T?>? _content;

	RenderFragment? Fragment { get; set; }

	Task<T?>? Subject { get; set; }

	bool Loaded
	{
		get => _loaded;
		set
		{
			if (_loaded != value)
			{
				_loaded = value;
				if (value)
				{
					var result = Subject.Verify().Result;
					Fragment = result != null ? ChildContent(result) : NotAssignedTemplate;
					StateHasChanged();
				}
			}
		}
	}	bool _loaded;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= DetermineSubject();
		Update();
	}

	 protected override Task OnParametersSetAsync() => Subject ?? base.OnParametersSetAsync();

	Task<T?> DetermineSubject()
	{
		var content = Content ?? Defaulting<T>.Default;
		var result = content.Get().AsTask();
		return result;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		Update();
	}

	void Update()
	{
		Loaded |= Subject is { IsCompletedSuccessfully: true };
	}

}