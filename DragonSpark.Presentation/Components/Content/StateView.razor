@typeparam T

@using DragonSpark.Presentation.Environment.Browser
@using DragonSpark.Model.Results
@using DragonSpark.Runtime.Activation

@inherits DragonSpark.Presentation.Components.Content.Templates.ActiveContentTemplateComponentBase<T>

@if (Content is not null)
{
    @ChildContent(Content)
}
else
{
    @LoadingTemplate
}

@code
{
    [Parameter]
    public IClientVariable<T> Definition { get; set; } = default!;

    [Parameter]
    public IResult<T> New { get; set; } = New<T>.Default;

    T? Content { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var current = await Definition.Get();
            Content = current.Success ? current.Value : New.Get();
            StateHasChanged();
        }
    }

}
