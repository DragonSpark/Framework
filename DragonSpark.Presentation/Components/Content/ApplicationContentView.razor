@using DragonSpark.Model.Selection
@using DragonSpark.Compose
@typeparam TValue

@inherits DragonSpark.Presentation.Components.Content.Templates.ActiveContentTemplateComponentBase<TValue>

<ActivityContainer CssClass="@CssClass" Context="receiver">
	@{ var content = Contents.Get(receiver); }
	<ResultingContentView T="TValue" Content="@content" UpdateMonitor="@content.Monitor"
		ChildContent="@ChildContent"
		LoadingTemplate="@LoadingTemplate"
		NotFoundTemplate="@NotFoundTemplate"
		ExceptionTemplate="@ExceptionTemplate"
		Rendered="@Rendered"
		Refreshed="@Refreshed"
		/>
</ActivityContainer>

@code
{
	ISelect<object, IActiveContent<TValue>> Contents { get; set; } = default!;

	[Parameter]
	public IActiveContent<TValue> Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				Contents = new ActivityContents<TValue>(_content).Then().Stores().New();
			}
		}
	}   IActiveContent<TValue> _content = default!;

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

	[Parameter]
	public EventCallback<TValue> Rendered { get; set; }

	[Parameter]
	public EventCallback<TValue> Refreshed { get; set; }
}