@using DragonSpark.Model.Selection
@using DragonSpark.Compose
@typeparam TValue

@inherits Templates.ActiveContentTemplateComponentBase<TValue>
<DragonSpark.Presentation.Components.Content.ApplicationPrincipalAwareContentView ForceRender="@ForceRender">
	<ActivityContainer CssClass="@CssClass">
		<ActivityContainerContent Input="@_contents"
								  ForceRender="@ForceRender" ChildContent="@ChildContent" LoadingTemplate="@LoadingTemplate"
								  NotFoundTemplate="@NotFoundTemplate" ExceptionTemplate="@ExceptionTemplate" Rendered="@Rendered" Refreshed="@Refreshed"
		/>
	</ActivityContainer>
</DragonSpark.Presentation.Components.Content.ApplicationPrincipalAwareContentView>

@code
{
    [Parameter]
    public required IActiveContent<TValue> Content
    {
        get;
        set
        {
            if (field != value)
            {
                field     = value;
                _contents = new ActivityContents<TValue>(field).Then().Stores().New();
            }
        }
    }   ISelect<IActivityReceiver, IActiveContent<TValue>> _contents = null!;

	[Parameter]
	public bool ForceRender { get; set; }

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

	[Parameter]
	public EventCallback<TValue> Rendered { get; set; }

	[Parameter]
	public EventCallback<TValue> Refreshed { get; set; }
}