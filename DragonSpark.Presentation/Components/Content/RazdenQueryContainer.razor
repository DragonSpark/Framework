@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Commands
@using DragonSpark.Model.Results
@using DragonSpark.Model.Selection.Stores
@using DragonSpark.Presentation.Components.Eventing
@using System.Collections.Concurrent

@typeparam T

@inherits ManyActiveContentTemplateComponentBase<IRadzenPaging<T>>

<div>
	<QueryContentContainer
		Content="@Content"
		Compose="@Compose"
		Pagers="@Pagers"
		LoadingTemplate="@LoadingTemplate"
		EmptyElementsTemplate="@EmptyElementsTemplate"
		NotFoundTemplate="@NotFoundTemplate"
		ExceptionTemplate="@ExceptionTemplate"
		ReportedType="@ReportedType"
	>
		<RefreshContainer Topic="@Content">
			<RadzenPagingContainer
				Content="@context"
				ChildContent="@ChildContent"
				LoadingTemplate="@LoadingTemplate"
				NotFoundTemplate="@NotFoundTemplate"
				ExceptionTemplate="@ExceptionTemplate"
				IncludeCount="@IncludeCount"
			/>
		</RefreshContainer>
	</QueryContentContainer>
</div>

@code {
	[Parameter]
	public IQueries<T>? Content { get; set; }

	[Parameter]
	public bool IncludeCount { get; set; } = true;

	[Parameter]
	public ICompose<T> Compose { get; set; } = DefaultCompose<T>.Default;

	[Parameter]
	public IPagers<T> Pagers { get; set; } = Pagers<T>.Default;

	[Parameter]
	public Type? ReportedType { get; set; }
}

