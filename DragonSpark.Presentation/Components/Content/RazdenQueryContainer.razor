@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Commands
@using DragonSpark.Model.Results
@using DragonSpark.Model.Selection.Stores
@using DragonSpark.Presentation.Components.Eventing
@using System.Collections.Concurrent

@typeparam T

@implements DragonSpark.Presentation.Components.Eventing.IHandle<IQueries<T>>
@implements IDisposable

@inject IEventAggregator Events

<QueryContainer
	Content="@Content"
	Compose="@Compose"
	Evaluations="@Evaluations"
	ReportedType="@ReportedType"
	LoadingTemplate="@LoadingTemplate"
	NoElementsFoundTemplate="@NoElementsFoundTemplate"
	NotAssignedTemplate="@NotAssignedTemplate"
	ExceptionTemplate="@ExceptionTemplate">
	@ChildContent(References.Get(context))
</QueryContainer>

@code {

	[Parameter]
	public IQueries<T>? Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				References?.Execute();
			}
		}
	}	IQueries<T>? _content;

	[Parameter]
	public bool IncludeCount { get; set; } = true;

	[Parameter]
	public ICompose<T> Compose { get; set; } = DefaultCompose<T>.Default;

	[Parameter]
	public IEvaluations<T> Evaluations { get; set; } = Evaluations<T>.Default;

	[Parameter]
	public Type? ReportedType { get; set; }

	[Parameter]
	public RenderFragment LoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

	[Parameter]
	public RenderFragment<IRadzenData<T>> ChildContent { get; set; } = default!;

	[Parameter]
	public RenderFragment? NoElementsFoundTemplate { get; set; }

	[Parameter]
	public RenderFragment NotAssignedTemplate { get; set; }
		= @<p>No instance was found for this view's content.</p> ;

	[Parameter]
	public RenderFragment ExceptionTemplate { get; set; } = DefaultExceptionTemplate.Default;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		Events.Subscribe(this);
		References = new DataReferences<T>(IncludeCount);
	}

	public Task HandleAsync(IQueries<T> parameter)
	{
		if (Content == parameter)
		{
			References.Execute();
			StateHasChanged();
		}
		return Task.CompletedTask;
	}

	DataReferences<T> References { get; set; } = default!;


	public void Dispose()
	{
		Events.Unsubscribe(this);
	}
}

