@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Model.Selection.Stores
@typeparam T

<ComposedQueryContainer
	Content="@Content"
	Compose="@Compose"
	Evaluations="@Evaluations"
	ReportedType="@ReportedType"
	LoadingTemplate="@LoadingTemplate"
	NoElementsFoundTemplate="@NoElementsFoundTemplate"
	NotAssignedTemplate="@NotAssignedTemplate"
	ExceptionTemplate="@ExceptionTemplate"
>
	@ChildContent(References.Get(context))
</ComposedQueryContainer>

@code {

	[Parameter]
	public IQueries<T>? Content { get; set; }

	[Parameter]
	public bool IncludeCount { get; set; } = true;

	[Parameter]
	public ICompose<T> Compose { get; set; } = Compose<T>.Default;

	[Parameter]
	public IEvaluations<T> Evaluations { get; set; } = Evaluations<T>.Default;

	[Parameter]
	public Type? ReportedType { get; set; }

	[Parameter]
	public RenderFragment LoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

	[Parameter]
	public RenderFragment<RadzenCallback<T>> ChildContent { get; set; } = default!;

	[Parameter]
	public RenderFragment? NoElementsFoundTemplate { get; set; }

	[Parameter]
	public RenderFragment NotAssignedTemplate { get; set; }
		= @<p>No instance was found for this view's content.</p> ;

	[Parameter]
	public RenderFragment ExceptionTemplate { get; set; } = DefaultExceptionTemplate.Default;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		References = new Callbacks(IncludeCount);
	}

	Callbacks References { get; set; } = default!;

	sealed class Callbacks : ReferenceValueStore<IEvaluate<T>, RadzenCallback<T>>
	{
		public Callbacks(bool count) : base(x => new RadzenCallback<T>(x, count)) {}
	}

}
