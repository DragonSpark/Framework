@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application
@typeparam TValue

@inherits DragonSpark.Presentation.Components.Content.Templates.ActiveContentTemplateComponentBase<TValue>

<ResultingContentView Content="@Subject"
					  ChildContent="@ChildContent"
					  LoadingTemplate="@LoadingTemplate"
					  NotFoundTemplate="@NotFoundTemplate"
					  ExceptionTemplate="@ExceptionTemplate"
					  UpdateMonitor="@UpdateMonitor"
                      Rendered="@Rendered"
                      Refreshed="@Refreshed"
					  />

@code
{
	[Parameter]
	public IResulting<TValue?>? Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				Subject = null;
			}
		}
	}	IResulting<TValue?>? _content;

    [Parameter]
    public IRequiresUpdate? UpdateMonitor { get; set; }

	[Parameter]
	public Type? ReportedType { get; set; }

    [Parameter]
    public EventCallback<TValue> Rendered { get; set; }

    [Parameter]
    public EventCallback<TValue> Refreshed { get; set; }

	IResulting<TValue?>? Subject { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= Content != null ? DetermineSubject(Content) : null;
	}

	IResulting<TValue?> DetermineSubject(IResulting<TValue?> content)
		=> content.Then().Handle(Exceptions, ReportedType ?? GetType()).Out();

}