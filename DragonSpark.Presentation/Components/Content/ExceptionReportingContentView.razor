@using DragonSpark.Compose
@using DragonSpark.Application.AspNet
@using DragonSpark.Model
@using DragonSpark.Model.Operations.Results
@using DragonSpark.Model.Selection.Conditions
@typeparam TValue

@inherits Templates.ActiveContentTemplateComponentBase<TValue>

<ResultingContentView T="TValue"
	Content="@Subject"
	ChildContent="@ChildContent"
	LoadingTemplate="@LoadingTemplate"
	NotFoundTemplate="@NotFoundTemplate"
	ExceptionTemplate="@ExceptionTemplate"
	UpdateMonitor="@UpdateMonitor"
	Rendered="@Rendered"
	Refreshed="@Refreshed"
	/>

@code
{
    [Parameter]
    public IResulting<TValue?>? Content
    {
        get;
        set
        {
            if (field != value)
            {
                field   = value;
                Subject = null;
            }
        }
    }

    [Parameter]
    public ICondition<None>? UpdateMonitor { get; set; }

	[Parameter]
	public Type? ReportedType { get; set; }

    [Parameter]
    public EventCallback<TValue> Rendered { get; set; }

    [Parameter]
    public EventCallback<TValue> Refreshed { get; set; }

	IResulting<TValue?>? Subject { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= Content != null ? DetermineSubject(Content) : null;
	}

	IResulting<TValue?> DetermineSubject(IResulting<TValue?> content)
		=> content.Then().Handle(Exceptions, ReportedType ?? GetType()).Out();

}