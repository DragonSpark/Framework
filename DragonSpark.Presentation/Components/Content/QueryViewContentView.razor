@using Microsoft.EntityFrameworkCore
@using JetBrains.Annotations
@using DragonSpark.Compose
@typeparam TItem

@Fragment

@code
{
#nullable enable
    RenderFragment? Fragment { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        Fragment ??= await DetermineContent();
    }

    async ValueTask<RenderFragment> DetermineContent()
        => Content != null
               ?
               NoElementsFoundTemplate == null || await Query.Any.Get(Content)
                   ?
                   ChildContent(FilterExpression != null ? Content.AsView(Query, FilterExpression) : Content.AsView(Query))
                   :
                   NoElementsFoundTemplate
               : NotAssignedTemplate;

    [Parameter]
    public EntityQuery<TItem> Query { get; set; } = DurableEntityQuery<TItem>.Default;

    [Parameter]
    public IQueryable<TItem>? Content
    {
        get => _content;
        set
        {
            if (_content != value)
            {
                Fragment = null;
                _content = value;
            }
        }
    }

    IQueryable<TItem>? _content;

    [Parameter]
    public string? FilterExpression { get; set; }

    [Parameter, UsedImplicitly]
    public RenderFragment<IQueryView<TItem>> ChildContent { get; set; } = default!;

    [Parameter]
    public RenderFragment? NoElementsFoundTemplate { get; set; }

    [Parameter]
    public RenderFragment NotAssignedTemplate { get; set; } = @<p>No instance was found for this view's content.</p>;
    #nullable restore
}