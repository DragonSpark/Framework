@typeparam T

@using DragonSpark.Compose
@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation.Components.Eventing

@inherits ManyActiveContentTemplateComponentBase<IPaging<T>>
@implements DragonSpark.Presentation.Components.Eventing.IHandle<RefreshQueriesMessage<T>>
@implements IDisposable

@inject IEventAggregator Events

<OperationContentContainer T="IPaging<T>"
	Content="@Subject"
	LoadingTemplate="@LoadingTemplate"
	NotAssignedTemplate="@NotAssignedTemplate"
	ExceptionTemplate="@ExceptionTemplate"
>
	@if (context != EmptyPaging<T>.Default)
	{
		@ChildContent(context)
	}
	else
	{
		@NoElementsFoundTemplate
	}
</OperationContentContainer>

@code
{
	[Parameter]
	public IQueries<T>? Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				Subject = null;
			}
		}
	}	IQueries<T>? _content;

	[Parameter]
	public ICompose<T> Compose
	{
		get => _compose;
		set
		{
			if (_compose != value)
			{
				_compose = value;
				Subject = null;
			}
		}
	}	ICompose<T> _compose = DefaultCompose<T>.Default;

	[Parameter]
	public IPagers<T> Pagers
	{
		get => _pagers;
		set
		{
			if (_pagers != value)
			{
				_pagers = value;
				Subject = null;
			}
		}
	}	IPagers<T> _pagers = Pagers<T>.Default;

	IResulting<IPaging<T>?>? Subject { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= DetermineSubject();
	}

	IResulting<IPaging<T>?> DetermineSubject()
	{
		if (Content != null)
		{
			var selector = NoElementsFoundTemplate == null ? Pagers.Then().Operation().Out() : new Pagings<T>(Pagers);
			var bind = selector.Then().Select(x => x.Account()).Bind(new PagingInput<T>(Content, Compose));
			var result = bind.Out();
			return result;
		}

		return Defaulting<IPaging<T>>.Default;
	}

	public Task HandleAsync(RefreshQueriesMessage<T> parameter)
	{
		if (parameter.Subject == Content)
		{
			Subject = null;
			StateHasChanged();
		}
		return Task.CompletedTask;
	}

	/*DataReferences<T> References { get; set; } = default!;*/


	public void Dispose()
	{
		Events.Unsubscribe(this);
	}
}