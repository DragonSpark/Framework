@typeparam T

@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Runtime.Operations

@inherits DragonSpark.Presentation.Components.Content.Templates.ActiveContentTemplateComponentBase<T>

@if (Subject is null)
{
	@NotFoundTemplate
}
else if (Subject?.Status is { IsFaulted : true })
{
	@ExceptionTemplate
}
else if (Fragment != null)
{
	@Fragment
}
else
{
	@LoadingTemplate
}

@code
{
	[Parameter]
	public IResulting<T?>? Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				Loaded = false;
				Subject = null;
			}
		}
	}	IResulting<T?>? _content;

	[Parameter]
	public EventCallback<T> Rendered { get; set; }

	[Parameter]
	public EventCallback<T> Refreshed { get; set; }

	RenderFragment? Fragment { get; set; }

	bool Loaded { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= DetermineSubject();
		Update();
	}

	protected override async Task OnParametersSetAsync()
	{
		await Update();
		await (Subject?.AsTask() ?? base.OnParametersSetAsync());
	}

	Worker<T?>? Subject { get; set; }

	Worker<T?> DetermineSubject() => new WorkingResult<T?>(Content ?? Defaulting<T>.Default).Get();

	protected override Task OnAfterRenderAsync(bool firstRender) => Update();

	Task Update()
	{
		var loaded = Subject?.Status is { IsCompletedSuccessfully: true };
		var update = loaded && loaded != Loaded;
		Loaded = loaded;
		if (update)
		{
			var result = Subject.Value().Status.Result;
			var refresh = Fragment is not null;
			Fragment = result is not null ? ChildContent(result) : NotFoundTemplate;
			StateHasChanged();
			if (result is not null)
			{
				var callback = refresh ? Refreshed : Rendered;
				return callback.InvokeAsync(result);
			}
		}
		return Task.CompletedTask;
	}

}