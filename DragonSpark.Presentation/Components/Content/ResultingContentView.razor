@typeparam T

@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Runtime.Operations

@inherits DragonSpark.Presentation.Components.Content.Templates.ActiveContentTemplateComponentBase<T>

@if (Subject is null)
{
	@NotFoundTemplate
}
else if (Subject?.Status is { IsFaulted : true })
{
	@ExceptionTemplate
}
else if (Fragment != null)
{
	@Fragment
}
else
{
	@LoadingTemplate
}

@code
{
	[Parameter]
	public IResulting<T?>? Content
	{
		get => _content;
		set
		{
			if (_content != value && value is not null)
			{
				_content = value;
				Loaded = false;
				Subject = null;
			}
		}
	}	IResulting<T?>? _content;

	RenderFragment? Fragment { get; set; }

	bool Loaded
	{
		get => _loaded;
		set
		{
			if (_loaded != value)
			{
				_loaded = value;
				if (value)
				{
					var result = Subject.Value().Status.Result;
					Fragment = result is not null ? ChildContent(result) : NotFoundTemplate;
					StateHasChanged();
				}
			}
		}
	}	bool _loaded;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= DetermineSubject();
		Update();
	}

	protected override Task OnParametersSetAsync() => Subject?.AsTask() ?? base.OnParametersSetAsync();

	Worker<T?>? Subject { get; set; }

	Worker<T?> DetermineSubject()
	{
		var content = Content ?? Defaulting<T>.Default;
		var result = new WorkingResult<T?>(content).Get();
		return result;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		Update();
	}

	void Update()
	{
		Loaded |= Subject?.Status is { IsCompletedSuccessfully: true };
	}

}