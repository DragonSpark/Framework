@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Eventing

@typeparam T

@inherits ActiveContentTemplateComponentBase<IRadzenPaging<T>>

@if (Current is null or {IsCompletedSuccessfully : true})
{
	<ContentView Content="@Subject" ChildContent="@ChildContent" NotFoundTemplate="@NotAssignedTemplate" />
}
else if (Current is {IsFaulted : true })
{
	@ExceptionTemplate
}
else
{
	@LoadingTemplate
}

@code
{
	Action<Task> _report = default!;
	protected override ValueTask Initialize()
	{
		_report = Report;
		return base.Initialize();
	}

	[Parameter]
	public IPaging<T>? Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				PagingState = Subject is {Current: {}} ? new (new Reload<T>(Subject.Current), Subject.Count) : null;
				Subject = null;
				/*Current = null;*/
			}
		}
	}	IPaging<T>? _content;

	[Parameter]
	public bool IncludeCount { get; set; } = true;

	PagingState<T>? PagingState { get; set; }
	IRadzenPaging<T>? Subject { get; set; }

	/*IRadzenPaging<T>? Subject
	{
		get => _subject;
		set
		{
			if (_subject != value)
			{
				if (_subject != null)
				{

				}

				_subject = value;

			}
		}
	}	IRadzenPaging<T>? _subject = default!;*/

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= Content != null ? New(Content) : default;
	}

	Task? Current { get; set; }

	void Report(Task parameter)
	{
		var update = Current is null;
		Current = parameter;
		if (update)
		{
			StateHasChanged();
		}
	}

	IRadzenPaging<T> New(IPaging<T> content)
	{
		var first = new RadzenPaging<T>(content, IncludeCount, PagingState);
		var second = new ValidatedRadzenPaging<T>(first);
		var result = new ReportedRadzenPaging<T>(second, _report);
		return result;
	}

}

