@* ReSharper disable UnknownCssClass *@
@inherits RadzenComponent

@using DragonSpark.Compose
@using JetBrains.Annotations
@using DragonSpark.Application.Runtime

@inject DialogService Dialogs
@inject IExceptions Exceptions


<RadzenCard Style="padding: 20px;" @onkeyup="LogKeyPressed">
    <ActivityContainer Context="receiver">
        <p style="margin-bottom: 25px;">@ChildContent</p>
        <div class="container">
            <div class="d-flex justify-content-between">
                <ButtonComponent id="@UniqueID" Text="Cancel" Click="OnCancel" ButtonStyle="ButtonStyle.Secondary"
                                 Style="margin: 10px; width: 150px" class="@SecondaryClass" />

                <ButtonComponent Text="OK" Click="@(Exceptions.Bind<MouseEventArgs>(OnAccept).Using(receiver).UpdateActivity())"
                                 Style="margin: 10px; width: 150px" class="@PrimaryClass" />
            </div>
        </div>
    </ActivityContainer>

    <Evaluate>document.getElementById("@UniqueID").focus();</Evaluate>
</RadzenCard>

@code {

    [UsedImplicitly]
    async Task OnAccept(MouseEventArgs parameter)
    {
        if (await Confirmation())
        {
            await Accept.InvokeAsync(parameter);
            Dialogs.Close();
        }
    }

    [UsedImplicitly]
    async Task OnCancel(MouseEventArgs parameter)
    {
        await Cancel.InvokeAsync(parameter);
        Dialogs.Close();
    }

    [Parameter, UsedImplicitly]
    public string PrimaryClass { get; set; } = default!;

    [Parameter, UsedImplicitly]
    public string SecondaryClass { get; set; } = default!;

    [Parameter, UsedImplicitly]
    public Func<ValueTask<bool>> Confirmation { get; set; } = () => true.ToOperation();

    [Parameter, UsedImplicitly]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter, UsedImplicitly]
    public EventCallback<MouseEventArgs> Accept { get; set; }

    [Parameter, UsedImplicitly]
    public EventCallback<MouseEventArgs> Cancel { get; set; }

    void LogKeyPressed(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Code)
        {
            case "Escape":
                Dialogs.Close();
                break;
        }
    }

}