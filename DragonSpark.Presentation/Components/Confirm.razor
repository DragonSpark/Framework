@inject DialogService Dialogs
@using DragonSpark.Compose
@using JetBrains.Annotations
@inherits RadzenComponent
<RadzenCard Style="padding: 20px;" @onkeyup="LogKeyPressed">
    <p style="margin-bottom: 25px;">@ChildContent</p>
    <div class="container">
        <div class="d-flex justify-content-between">
            <ButtonComponent id="@UniqueID" Text="Cancel" Click="OnCancel" ButtonStyle="ButtonStyle.Secondary"
                             Style="margin: 10px; width: 150px" />
            <ButtonComponent Text="OK" Click="OnAccept" Style="margin: 10px; width: 150px" />
        </div>
    </div>
    <Evaluate>document.getElementById("@UniqueID").focus();</Evaluate>
</RadzenCard>

@code {

    async Task OnAccept(MouseEventArgs parameter)
    {
        if (await Confirmation())
        {
            await Accept.InvokeAsync(parameter);
            Dialogs.Close();   
        }
    }

    async Task OnCancel(MouseEventArgs parameter)
    {
        await Cancel.InvokeAsync(parameter);
        Dialogs.Close();
    }

    [Parameter, UsedImplicitly]
    public Func<ValueTask<bool>> Confirmation { get; set; } = () => true.ToOperation();

    [Parameter, UsedImplicitly]
    public RenderFragment ChildContent { get; set; }

    [Parameter, UsedImplicitly]
    public EventCallback<MouseEventArgs> Accept { get; set; }

    [Parameter, UsedImplicitly]
    public EventCallback<MouseEventArgs> Cancel { get; set; }

    void LogKeyPressed(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Code)
        {
            case "Escape":
                Dialogs.Close();
                break;
        }
    }

}