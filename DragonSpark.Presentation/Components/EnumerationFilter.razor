@typeparam T
@inherits ComponentBase
@implements IDisposable
@implements IAdjust<T>

@using System.Linq
@using DragonSpark.Application.Runtime
@using DragonSpark.Compose
@using DragonSpark.Presentation.Model
@using System.Linq.Dynamic.Core
@using DragonSpark.Application

<RadzenDropDown @bind-Value="@Candidates.Selected" TextProperty="Name" Style="width: 100%"
                Data="@Candidates" AllowClear="@Applied" Change="Apply" />


@code {
#nullable enable
    [CascadingParameter]
    IAdjustmentContainer<T> Container
    {
        get => _container.Verify();
        set
        {
            if (_container != value)
            {
                if (Current != null)
                {
                    Current.Dispose();
                    Current = null;
                }

                if ((_container = value) != null)
                {
                    Current = _container.Get(this);
                }
            }

        }
    }
    IAdjustmentContainer<T>? _container;

    [Parameter]
    public Type EnumerationType { get; set; } = default!;

    [Parameter]
    public string PropertyName { get; set; } = default!;

    Task Apply()
    {
        Candidates.Selected ??= Candidates.First();
        Container.Execute();
        return Task.CompletedTask;
    }

    bool Applied => Candidates.Selected?.Value is not null;

    public IQueryable<T> Get(IQueryable<T> query)
        => Applied ? query.Where($"{PropertyName} == @0", Candidates.Selected!.Value) : query;

    protected override void OnInitialized()
    {
        Candidates = Enum.GetValues(EnumerationType)
                         .Cast<Enum>()
                         .Select(t => new SelectionListing<Enum?> { Name = t.ToString(), Value = t })
                         .Prepend(new SelectionListing<Enum?> { Name = "All", Value = null })
                         .ToSelectedCollection()
                         .With(x => x.Selected = x.First());
        base.OnInitialized();
    }


    SelectedCollection<SelectionListing<Enum?>> Candidates { get; set; } = default!;

    IDisposable? Current { get; set; }

    public void Dispose()
    {
        Current?.Dispose();
        Current = null;
    }
}
