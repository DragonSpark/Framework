@typeparam T


@using DragonSpark.Presentation.Components.Interaction
@using DragonSpark.Model.Selection.Conditions
@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Content.Templates
@inherits ComponentStateComponentBase

<SessionStateComponent T="T" Owner="Owner" Qualifier="@Qualifier">
    <ClientValueBindingComponent T="T" Value="@Value" AssignedValue="@AssignedValue" Store="context" ChildContent="@ChildContent" Allowed="@Allowed" ValueChanged="@OnChange" />
</SessionStateComponent>

@code {
    [Parameter]
    public T Value { get; set; } = default!;

    [Parameter]
    public Func<T>? AssignedValue { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment<Binding<T>> ChildContent { get; set; } = default!;

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = MinimalLoadingTemplate.Default;

    [Parameter]
    public ICondition<T> Allowed { get; set; } = Is.Always<T>().Out();

    Task OnChange(T parameter) => ValueChanged.InvokeAsync(Value = parameter);
}