@using DragonSpark.Presentation.Environment.Browser
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using DragonSpark.Model.Results
@using DragonSpark.Compose
@using DragonSpark.Model.Operations.Results

@implements IAsyncDisposable

@typeparam T

@code
{
    readonly Switch _initialized = new();

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public IClientVariable<T> Store { get; set; } = default!;

    [Parameter]
    public T DefaultValue { get; set; } = default!;

    [Parameter]
    public EventCallback<T> Initialized { get; set; }

    [Parameter]
    public IResulting<T> Source { get; set; } = default!;

    ProtectedBrowserStorageResult<T>? Result { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_initialized.Up())
        {
            Result = await Store.Get();
            if (Result?.Success ?? false)
            {
                await Initialized.Invoke(Result.Value.Value).Await();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_initialized && Enabled)
        {
            await Store.Await(await Source.Get());
        }
    }
}