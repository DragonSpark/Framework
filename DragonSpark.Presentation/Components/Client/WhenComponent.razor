@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Environment.Browser.Time

@inject IAdjustToClientTime Offset

@if (Subject is not null)
{
    @ChildContent(Subject.Value)
}
else
{
    @LoadingTemplate
    <DragonSpark.Presentation.Components.Content.Rendering.ConnectedStateAwareComponent>
        <DragonSpark.Presentation.Components.Eventing.HandlerView T="ClientOffsetAssignedMessage" Received="@OnUpdate" />
    </DragonSpark.Presentation.Components.Content.Rendering.ConnectedStateAwareComponent>
}

@code
{
    [Parameter]
    public DateTimeOffset When
    {
        get => _when;
        set
        {
            if (_when != value)
            {
                _when = value;
                Subject = null;
                Update();
            }
        }
    }	DateTimeOffset _when;

    [Parameter]
    public RenderFragment<DateTimeOffset> ChildContent { get; set; } = default!;

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = MinimalLoadingTemplate.Default;

    DateTimeOffset? Subject { get; set; }

    void Update()
    {
        if (_when != DateTimeOffset.MinValue)
        {
            Subject ??= Offset.Get(When);
            StateHasChanged();
        }
    }

    void OnUpdate(ClientOffsetAssignedMessage parameter)
    {
        Update();
    }
}