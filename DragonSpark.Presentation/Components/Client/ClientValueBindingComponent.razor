@using DragonSpark.Presentation.Environment.Browser
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using DragonSpark.Compose
@using DragonSpark.Model.Results
@using DragonSpark.Model.Selection.Conditions
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Components.Interaction

@typeparam T

@if (_rendered)
{
    @if (Binding is not null)
    {
        @ChildContent(Binding)
    }
}
else
{
    @LoadingTemplate
}


@code
{
    ProtectedBrowserStorageResult<T>? _result;

    Switch _rendered = new(), _requested = new(), _initialize = new();

    [Parameter]
    public IClientVariable<T> Store { get; set; } = null!;

    [Parameter]
    public T Value { get; set; } = default!;

    [Parameter]
    public Func<T>? AssignedValue { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<Binding<T>> Loaded { get; set; }

    [Parameter]
    public IEqualityComparer<T> Comparer { get; set; } = EqualityComparer<T>.Default;

    [Parameter]
    public ICondition<T> Allowed { get; set; } = Is.Always<T>().Out();

    [Parameter]
    public RenderFragment<Binding<T>> ChildContent { get; set; } = null!;

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = MinimalLoadingTemplate.Default;

    void RequestUpdate(T parameter)
    {
        if (_rendered && _requested.Up())
        {
            StateHasChanged();
        }
    }

    Binding<T>? Binding { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_requested.Down() && Binding is not null)
        {
            await ValueChanged.Invoke(Value = Binding.Value);
            if (Allowed.Get(Binding.Value))
            {
                await Store.Off(Binding.Value);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_result is null && _initialize.Up())
        {
            _result = await Store.Get();

            if (_result?.Success ?? false)
            {
                var value = _result.Value.Value ?? (AssignedValue is not null ? AssignedValue() : Value);
                Binding = new Binding<T>(value, RequestUpdate, Comparer);
                await Loaded.Invoke(Binding);
                await ValueChanged.Invoke(Value = Binding.Value);
            }
            else if (AssignedValue is not null)
            {
                var value = AssignedValue();
                Binding = new Binding<T>(value, RequestUpdate, Comparer);
                await ValueChanged.Invoke(Value = value);
            }
            else
            {
                Binding = new Binding<T>(Value, RequestUpdate, Comparer);
            }
            _rendered.Up();
            StateHasChanged();
        }
    }
}