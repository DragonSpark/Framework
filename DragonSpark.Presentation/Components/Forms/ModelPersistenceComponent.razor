@using DragonSpark.Compose
@using DragonSpark.Model.Results
@using DragonSpark.Presentation.Components.Content.Templates

@typeparam T where T : class

@inherits ModelPersistenceComponentBase<T>

@if (!Load && !_active)
{
    @ChildContent(DetermineModel())
}
else
{
    @DefaultLoadingTemplate.Default
}
@code {
    readonly Switch _active = new();
    EventCallback _load;
    protected override void OnInitialized()
    {
        _load = Start.A.Callback(LoadContent).UpdateActivity(Receiver).Monitoring(_active);
        base.OnInitialized();
    }

    [Parameter]
    public Switch Load { get; set; } = new();

    [Parameter]
    public RenderFragment<T> ChildContent { get; set; } = null!;

    protected override Task OnAfterRenderAsync(bool firstRender) => Load.Down() ? _load.Invoke() : base.OnParametersSetAsync();

}