@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Eventing
@using Humanizer

@typeparam T where T : class

@inherits ModelPersistenceComponentBase<T>

@inject ProblemLoadingState ProblemLoading
@inject ProblemSavingState ProblemSaving
@inject SavedContentMessage Saved

<HandlerView T="LoadModelMessage" Received="@HandleAsync" />
<HandlerView T="SaveModelMessage" Received="@HandleAsync" />

@code {

    EventCallback _load;
    protected override void OnInitialized()
    {
        _load = Start.A.Callback(LoadContent).Using(Receiver).UpdateActivity();
        base.OnInitialized();
    }

    [Parameter]
    public T Model { get; set; } = default!;

    [Parameter]
    public EventCallback Loaded { get; set; }

    [CascadingParameter] IActivityReceiver Receiver { get; set; } = default!;

    /*protected override Task OnAfterRenderAsync(bool firstRender)
        => Load.Down() ? _load.Invoke() : Save.Down() ? SaveContent() : base.OnAfterRenderAsync(firstRender);*/

    async Task LoadContent()
    {
        var current = await Store.Get();
        if (current.Success)
        {
            var content = current.Value.Verify();
            try
            {
                await ModelChanging.Invoke(Model);
                Target.Execute(new(Model, content));
                await ModelChanged.Invoke(Model).Await();
            }
            catch (Exception e)
            {
                ProblemLoading.Execute(new(e, content));
                await ErrorOccurred.Invoke().Await();
            }
        }
    }

    async Task SaveContent()
    {
        try
        {
            var content = Formatter.Get(Model);
            await Store.Await(content);
            Saved.Execute(content.Length.Bytes().Humanize());
        }
        catch (Exception e)
        {
            ProblemSaving.Execute(e);
            await ErrorOccurred.Invoke().Await();
        }
    }

    Task HandleAsync(SaveModelMessage message) => message.Subject == Model ? SaveContent() : Task.CompletedTask;

    Task HandleAsync(LoadModelMessage message) => message.Subject == Model ? _load.Invoke() : Task.CompletedTask;
}