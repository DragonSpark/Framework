@*ATTRIBUTION: https://github.com/SamProf/MatBlazor/issues/189#issuecomment-572954519 *@

@inherits TextInputComponent
@implements IDisposable

@inject IFocusHandler Focus

@using MatBlazor
@using System.Linq.Expressions
@using System.Timers
@using DragonSpark.Model.Results
@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Forms.Validation
@using LinqKit
@using Majorsoft.Blazor.Components.Common.JsInterop.Focus

<MatTextField TValue="string"
    Id="@Id"
    RefBack="@RefBack"
    Value="@Current"
    ValueChanged="OnValueChanged"
    ValidationDisabled="true"
    InputAttributes="@InputAttributes"
    Attributes="@Attributes"
    Class="@Class"
    Style="@Style"
    ChildContent="@ChildContent"
    IconOnClick="@IconOnClick"
    OnFocus="@HandleOnFocus"
    OnFocusOut="@HandleFocusOut"
    OnKeyPress="@OnKeyPress"
    OnKeyDown="@OnKeyDown"
    OnKeyUp="@KeyUp"
    OnInput="@Input"
    Label="@Label"
    Icon="@Icon"
    IconTrailing="@IconTrailing"
    Box="@Box"
    TextArea="@TextArea"
    Dense="@Dense"
    Outlined="@Outlined"
    Disabled="@Disabled"
    ReadOnly="@ReadOnly"
    FullWidth="@FullWidth"
    Required="@Required"
    HelperText="@HelperText"
    HelperTextPersistent="@HelperTextPersistent"
    HelperTextValidation="@HelperTextValidation"
    PlaceHolder="@PlaceHolder"
    HideClearButton="@HideClearButton"
    Type="@Type"
    InputClass="@InputClass"
    InputStyle="@InputStyle"
    Format="@Format"
    />

@code
{
    readonly Switch _focus = new();
    Func<Task> _tick = default!;
    Timer _timer = default!;
    bool _active;
    FieldIdentifier _identifier;
    string _stored = string.Empty;

    [Parameter]
    public string Value { get; set; } = default!;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string>> ValueExpression
    {
        get => _valueExpression;
        set
        {
            if (_valueExpression != value)
            {
                _valueExpression = value;
                _identifier = FieldIdentifier.Create(ValueExpression);
            }
        }
    }	Expression<Func<string>> _valueExpression = default!;

    [CascadingParameter]
    EditContext? EditContext { get; set; }

    [CascadingParameter]
    IActivityReceiver? Receiver { get; set; }

    string Current => _active ? _stored : Value;

    protected override void OnInitialized()
    {
        _timer = new Timer(750) { AutoReset = false };
        _timer.Elapsed += OnTick;
        _tick = Tick;
        base.OnInitialized();
    }

    Task HandleOnFocus(FocusEventArgs parameter)
    {
        _stored = Value;
        _active = true;
        return OnFocus.InvokeAsync(parameter);
    }

    Task KeyUp(KeyboardEventArgs parameter)
    {
        _timer.Stop();
        switch (parameter.Key)
        {
            case "Enter":
                return Update();
            default:
                if (parameter.Key != "Tab" && parameter is { CtrlKey: false, AltKey: false })
                {
                    _timer.Start();
                }
                return OnKeyUp.InvokeAsync(parameter);
        }
    }

    async Task Update()
    {
        await ValueChanged.InvokeAsync(Value);
        EditContext?.NotifyFieldChanged(in _identifier);
    }

    async Task Tick()
    {
        await Update();
        await Task.Delay(175);
        if (_focus.Down())
        {
            await Focus.FocusElementAsync(RefBack.Current).ConfigureAwait(false);
        }
    }

    void OnTick(object? _, ElapsedEventArgs __)
    {
        InvokeAsync(_tick);
    }

    Task Input(ChangeEventArgs parameter)
    {
        Value = parameter.Value?.ToString() ?? string.Empty;
        return OnInput.InvokeAsync(parameter);
    }

    async Task OnValueChanged(string parameter)
    {
        _active = false;
        _timer.Stop();
        Value = _stored = parameter;
        await Update();
    }

    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }

    async Task HandleFocusOut(FocusEventArgs parameter)
    {
        if (_active)
        {
            _active = false;
            _timer.Stop();
            await Update();
        }
        else if (Receiver is not null && IsActive.Default.Get(Receiver))
        {
            _focus.Up();
        }
        await OnFocusOut.InvokeAsync(parameter).ConfigureAwait(false);
    }
}