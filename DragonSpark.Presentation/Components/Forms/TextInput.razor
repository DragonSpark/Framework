@*ATTRIBUTION: https://github.com/SamProf/MatBlazor/issues/189#issuecomment-572954519 *@

@inherits TextInputComponent

@using MatBlazor
@using System.Linq.Expressions
@using System.Timers
@using DragonSpark.Model.Results
@using DragonSpark.Compose

<MatTextField TValue="string"
    Value="@CurrentValue"
    ValueChanged="@OnChanged"
    ValueExpression="@ValueExpression"
    ValidationDisabled="@ValidationDisabled"
    RefBack="@RefBack"
    Id="@Id"
    InputAttributes="@InputAttributes"
    Attributes="@Attributes"
    Class="@Class"
    Style="@Style"
    ChildContent="@ChildContent"
    IconOnClick="@IconOnClick"
    OnFocus="@OnFocus"
    OnFocusOut="@OnUpdate"
    OnKeyPress="@OnKeyPress"
    OnKeyDown="@OnKeyDown"
    OnKeyUp="@KeyUp"
    OnInput="@Input"
    Label="@Label"
    Icon="@Icon"
    IconTrailing="@IconTrailing"
    Box="@Box"
    TextArea="@TextArea"
    Dense="@Dense"
    Outlined="@Outlined"
    Disabled="@Disabled"
    ReadOnly="@ReadOnly"
    FullWidth="@FullWidth"
    Required="@Required"
    HelperText="@HelperText"
    HelperTextPersistent="@HelperTextPersistent"
    HelperTextValidation="@HelperTextValidation"
    PlaceHolder="@PlaceHolder"
    HideClearButton="@HideClearButton"
    Type="@Type"
    InputClass="@InputClass"
    InputStyle="@InputStyle"
    Format="@Format"
    />

@code
{
    readonly ISwitch _updated = new Switch();

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (!_updating && _value != value)
            {
                _value = value;
                _updated.Execute(true);
            }
        }
    }	string _value = default!;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string>> ValueExpression { get; set; } = default!;

    bool _updating;
    Timer _timer = default!;
    Func<Task> _update = default!;

    string CurrentValue { get; set; } = default!;

    [CascadingParameter]
    EditContext? EditContext { get; set; }

    protected override void OnInitialized()
    {
        _timer = new Timer(750) { AutoReset = false };
        _timer.Elapsed += OnTick;
        _update = Update;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (_updated.Down())
        {
            CurrentValue = Value;
        }
        base.OnParametersSet();
    }

    Task KeyUp(KeyboardEventArgs parameter)
    {
        _timer.Stop();
        switch (parameter.Key)
        {
            case "Enter":
                return Update();
            default:
                _timer.Start();
                return OnKeyUp.InvokeAsync(parameter);
        }
    }

    async Task Update()
    {
        _updating = true;
        await ValueChanged.InvokeAsync(Value = CurrentValue);
        var context = EditContext;
        if (context is not null)
        {
            var identifier = FieldIdentifier.Create(ValueExpression);
            context.NotifyFieldChanged(in identifier);
        }
        _updating = false;
    }

    void OnTick(object? _, ElapsedEventArgs __)
    {
        InvokeAsync(_update);
    }

    Task Input(ChangeEventArgs parameter)
    {
        CurrentValue = parameter.Value?.ToString() ?? string.Empty;
        return OnInput.InvokeAsync(parameter);
    }

    Task OnChanged(string parameter)
    {
        CurrentValue = parameter;
        return Task.CompletedTask;
    }

    async Task OnUpdate(FocusEventArgs parameter) {

        _timer.Stop();
        await Update();
        await OnFocusOut.InvokeAsync(parameter).ConfigureAwait(false);
    }
}
