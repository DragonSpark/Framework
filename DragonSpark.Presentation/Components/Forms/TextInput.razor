@*ATTRIBUTION: https://github.com/SamProf/MatBlazor/issues/189#issuecomment-572954519 *@

@inherits TextInputComponent
@implements IDisposable

@inject IFocusHandler Focus

@using MatBlazor
@using System.Linq.Expressions
@using System.Timers
@using DragonSpark.Model.Results
@using DragonSpark.Compose
@using Majorsoft.Blazor.Components.Common.JsInterop.Focus

<MatTextField TValue="string"
    Id="@Id"
    RefBack="@RefBack"
    Value="@Current"
    ValueChanged="OnCommit"
    ValidationDisabled="true"
    InputAttributes="@InputAttributes"
    Attributes="@Attributes"
    Class="@Class"
    Style="@Style"
    ChildContent="@ChildContent"
    IconOnClick="@IconOnClick"
    OnFocus="@HandleOnFocus"
    OnFocusOut="@HandleFocusOut"
    OnKeyPress="@OnKeyPress"
    OnKeyDown="@KeyDown"
    OnKeyUp="@KeyUp"
    OnInput="@Input"
    Label="@Label"
    Icon="@Icon"
    IconTrailing="@IconTrailing"
    Box="@Box"
    TextArea="@TextArea"
    Dense="@Dense"
    Outlined="@Outlined"
    Disabled="@Disabled"
    ReadOnly="@ReadOnly"
    FullWidth="@FullWidth"
    Required="@Required"
    HelperText="@HelperText"
    HelperTextPersistent="@HelperTextPersistent"
    HelperTextValidation="@HelperTextValidation"
    PlaceHolder="@PlaceHolder"
    HideClearButton="@HideClearButton"
    Type="@Type"
    InputClass="@InputClass"
    InputStyle="@InputStyle"
    Format="@Format"
    />

@code
{
    readonly Switch _focus = new(), _active = new();
    readonly Timer _timer = new (750) { AutoReset = false };
    Func<Task> _tick = default!;
    FieldIdentifier _identifier;
    string _stored = string.Empty, _current = string.Empty;

    [Parameter]
    public string Value { get; set; } = default!;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback Updated { get; set; }

    [Parameter]
    public Expression<Func<string>> ValueExpression
    {
        get => _valueExpression;
        set
        {
            if (_valueExpression != value)
            {
                _valueExpression = value;
                _identifier = FieldIdentifier.Create(ValueExpression);
            }
        }
    }	Expression<Func<string>> _valueExpression = default!;

    [CascadingParameter]
    EditContext? EditContext { get; set; }

    [CascadingParameter]
    IActivityReceiver? Receiver { get; set; }

    string Current => _active ? _stored : Value;

    protected override void OnInitialized()
    {
        _timer.Elapsed += OnTick;
        _tick = Tick;
        base.OnInitialized();
    }

    Task HandleOnFocus(FocusEventArgs parameter)
    {
        _stored = _current = Value;
        _active.Up();
        _focus.Up();
        return OnFocus.InvokeAsync(parameter);
    }

    Task KeyUp(KeyboardEventArgs parameter)
    {
        switch (parameter.Key)
        {
            case "Tab":
            case "Control":
            case "Alt":
            case "Shift":
            case "ArrowUp":
            case "ArrowDown":
            case "ArrowLeft":
            case "ArrowRight":
            case "Home":
            case "End":
            case "PageUp":
            case "PageDown":
            case "Insert":
                break;
            case "Enter":
                _timer.Stop();
                break;
            default:
                if (parameter is { AltKey: false })
                {
                    _timer.Stop();
                    _timer.Start();
                    _active.Up();
                    return OnKeyUp.InvokeAsync(parameter);
                }
                break;
        }
        return Task.CompletedTask;
    }

    Task KeyDown(KeyboardEventArgs parameter)
    {
        _timer.Stop();
        _focus.Up();
        switch (parameter.Key)
        {
            case "Enter":
                return OnCommit(_current);
        }
        return OnKeyDown.InvokeAsync(parameter);
    }

    Task Input(ChangeEventArgs parameter)
    {
        _current = parameter.Value?.ToString() ?? string.Empty;
        return OnInput.InvokeAsync(parameter);
    }

    Task OnCommit(string parameter)
    {
        _timer.Stop();
        _current = _stored = parameter;
        return EndEdit();
    }

    async Task EndEdit()
    {
        await Commit();
        if (_focus.Down())
        {
            await Task.Delay(250);
            await Focus.FocusElementAsync(RefBack.Current).ConfigureAwait(false);
        }
    }

    async Task Commit()
    {
        if (Value != _current)
        {
            Value = _current;
            await ValueChanged.Invoke(Value);
            EditContext?.NotifyFieldChanged(in _identifier);
            await Updated.Invoke();
        }
    }

    void OnTick(object? _, ElapsedEventArgs __)
    {
        InvokeAsync(_tick);
    }

    Task Tick() => EndEdit();

    async Task HandleFocusOut(FocusEventArgs parameter)
    {
        if (Receiver?.Active ?? false)
        {
            _active.Up();
            _focus.Up();
            await Commit();
        }
        else if (_active.Down())
        {
            _timer.Stop();
            // await Commit();
        }

        await OnFocusOut.InvokeAsync(parameter).ConfigureAwait(false);
    }

    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }
}