@*ATTRIBUTION: https://github.com/SamProf/MatBlazor/issues/189#issuecomment-572954519 *@

@inherits TextInputComponent

@using MatBlazor
@using System.Linq.Expressions
@using System.Timers

<MatTextField
    @bind-Value="@CurrentValue"
    ValidationDisabled="@ValidationDisabled"
    RefBack="@RefBack"
    Id="@Id"
    InputAttributes="@InputAttributes"
    Attributes="@Attributes"
    Class="@Class"
    Style="@Style"
    ChildContent="@ChildContent"
    IconOnClick="@IconOnClick"
    OnFocus="@OnFocus"
    OnFocusOut="@OnFocusOut"
    OnKeyPress="@OnKeyPress"
    OnKeyDown="@OnKeyDown"
    OnKeyUp="@KeyUp"
    OnInput="@Input"
    Label="@Label"
    Icon="@Icon"
    IconTrailing="@IconTrailing"
    Box="@Box"
    TextArea="@TextArea"
    Dense="@Dense"
    Outlined="@Outlined"
    Disabled="@Disabled"
    ReadOnly="@ReadOnly"
    FullWidth="@FullWidth"
    Required="@Required"
    HelperText="@HelperText"
    HelperTextPersistent="@HelperTextPersistent"
    HelperTextValidation="@HelperTextValidation"
    PlaceHolder="@PlaceHolder"
    HideClearButton="@HideClearButton"
    Type="@Type"
    InputClass="@InputClass"
    InputStyle="@InputStyle"
    Format="@Format"
    />

@code
{
    [Parameter]
    public string Value { get; set; } = default!;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string>> ValueExpression { get; set; } = default!;

    Timer _timer = default!;
    Func<Task> _update = default!;

    string CurrentValue { get; set; } = default!;

    [CascadingParameter]
    EditContext? EditContext { get; set; }

    protected override void OnInitialized()
    {
        _timer = new Timer(500) { AutoReset = false };
        _timer.Elapsed += OnTick;
        _update = Update;
        CurrentValue = Value;
        base.OnInitialized();
    }

    Task KeyUp(KeyboardEventArgs parameter)
    {
        _timer.Stop();
        _timer.Start();

        return OnKeyUp.InvokeAsync(parameter);
    }

    async Task Update()
    {
        await ValueChanged.InvokeAsync(Value = CurrentValue);
        var context = EditContext;
        if (context is not null)
        {
            var identifier = FieldIdentifier.Create(ValueExpression);
            context.NotifyFieldChanged(in identifier);
        }
    }

    void OnTick(object? _, ElapsedEventArgs __)
    {
        InvokeAsync(_update);
    }

    Task Input(ChangeEventArgs parameter)
    {
        CurrentValue = parameter.Value?.ToString() ?? string.Empty;
        return OnInput.InvokeAsync(parameter);
    }
}
