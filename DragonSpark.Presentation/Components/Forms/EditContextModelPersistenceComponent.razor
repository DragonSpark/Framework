@typeparam T where T : class

@using DragonSpark.Application.Diagnostics
@using DragonSpark.Application.Runtime
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Operations
@using DragonSpark.Model.Results
@using DragonSpark.Model.Sequences
@using DragonSpark.Presentation.Components.Eventing

@inherits ModelPersistenceComponentBase<T>
@implements IDisposable

@inject IPublisher<LoadModelMessage> Load
@inject IPublisher<SaveModelMessage> Save

<ModelPersistenceComponent Model="@_model" Formatter="@Formatter" Target="@Target" ModelChanging="@ModelChanging" ModelChanged="@ModelChanged" Store="@Store" ErrorOccurred="@ErrorOccurred" />

<HandlerView T="LoadEditContextMessage" Received="@HandleAsync" />
<HandlerView T="SaveEditContextMessage" Received="@HandleAsync" />

@code {
    readonly Switch  _save = new();
    Array<string>    _skip   = Array<string>.Empty;
    IOperation<None> _call   = default!;
    T                _model  = default!;
    EditContext?     _current;

    protected override void OnInitialized()
    {
        var operate = new ExceptionAware<None>(OnSave, Exceptions, GetType()).Then();
        _call = new ThrottleOperation<None>(operate, TimeSpan.FromMilliseconds(100)).Then().Out();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        var context = ResolvedContext;
        if (_current != context)
        {
            if (_current is not null)
            {
                _current.OnFieldChanged -= FieldChanged;
            }

            if ((_current = context) != null)
            {
                _current.OnFieldChanged += FieldChanged;
                _model = Model ?? _current.Model.To<T>();
            }
        }

        base.OnParametersSet();
    }

    EditContext ResolvedContext
        => (EditContext ?? ParentEditContext).Verify("Edit Context is required for EditContextModelPersistenceComponent");

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public T? Model { get; set; }

    [Parameter]
    public EditContext? EditContext { get; set; }

    [Parameter]
    public string FieldsToSkip
    {
        get => _fieldsToSkip;
        set
        {
            if (_fieldsToSkip != value)
            {
                _fieldsToSkip = value;
                _skip         = _fieldsToSkip.Split(',', StringSplitOptions.RemoveEmptyEntries);
            }
        }
    }   string _fieldsToSkip = default!;

    [CascadingParameter]
    EditContext? ParentEditContext { get; set; }

    void FieldChanged(object? sender, FieldChangedEventArgs args)
    {
        if (Enabled && !_skip.Open().Contains(args.FieldIdentifier.FieldName) && _save.Up())
        {
            StateHasChanged();
        }
    }

    ValueTask OnSave(None _) => Save.Get(new(_model));

    protected override Task OnAfterRenderAsync(bool firstRender)
        => _save.Down() ? _call.Get().AsTask() : base.OnAfterRenderAsync(firstRender);

    public Task HandleAsync(SaveEditContextMessage message)
        => message.Subject == ResolvedContext ?  _call.Get().AsTask(): Task.CompletedTask;

    public Task HandleAsync(LoadEditContextMessage message)
        => message.Subject == ResolvedContext ? Load.Get(new(_model)).AsTask() : Task.CompletedTask;

    public void Dispose()
    {
        if (_current is not null)
        {
            _current.OnFieldChanged -= FieldChanged;
        }
    }
}