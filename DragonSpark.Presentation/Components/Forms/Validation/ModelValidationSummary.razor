@inherits Components.ComponentBase
@using NetFabric.Hyperlinq
@using DragonSpark.Model
@using DragonSpark.Compose
@implements IDisposable

@code {
	ValidationMessageStore? _store;

    [Parameter]
    public ValidationFieldMessage Message
    {
        get;
        set
        {
            if (!ReferenceEquals(field, value))
            {
                field    = value;
                Messages = value.Account() == null ? Empty.Array<ValidationFieldMessage>() : value.Yield().ToArray();
            }
        }
    } = null!;

    [Parameter]
    public ICollection<ValidationFieldMessage> Messages
    {
        get;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                _store?.Clear();

                if (value.Any())
                {
                    foreach (var (@field, message) in value.AsValueEnumerable())
                    {
                        _store?.Add(@field, message);
                    }

                    EditContext?.NotifyValidationStateChanged();
                }
            }
        }
    } = null!;

    [CascadingParameter]
    EditContext? EditContext
    {
        get;
        set
        {
            if (field != value)
            {
                if (field != null)
                {
                    _store?.Clear();
                    field.OnFieldChanged        -= Update;
                    field.OnValidationRequested -= Update;
                }

                if ((field = value) != null)
                {
                    Assign(field);
                }
            }
        }
    }

    void Assign(EditContext parameter)
	{
		parameter.OnFieldChanged        += Update;
		parameter.OnValidationRequested += Update;

		_store = new ValidationMessageStore(parameter);
		if (Messages.Account() != null)
		{
			foreach (var (field, message) in Messages.AsValueEnumerable())
			{
				_store?.Add(field, message);
			}
		}
	}

	void Update(object? sender, EventArgs e)
	{
		Update();
	}

	void Update()
	{
		if (EditContext != null)
		{
			_store?.Clear();
		}
	}

	public void Dispose()
	{
		GC.SuppressFinalize(this);
		EditContext = null;
	}
}
