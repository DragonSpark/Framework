@using DragonSpark.Presentation.Connections
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Presentation.Components.Content.Rendering
@implements IAsyncDisposable

@inject SessionRenderState State

@code
{
	IReceiver? connection;

	[Parameter]
	public IReceive Registration { get; set; } = default!;

	[Parameter]
	public IDepending<None> Condition { get; set; } = Is.Always<None>().Operation().Out();

	[Parameter]
	public EventCallback<None> Received { get; set; }

	protected override Task OnInitializedAsync()
	{
	    switch (State.Get())
	    {
	        case RenderState.Default:
	            break;
	        default:
	            connection = Registration.Get(OnReceive);
	            connection.Get();
	            break;
	    }
		return base.OnInitializedAsync();
	}

	async Task OnReceive()
	{
		if (await Condition.Get())
		{
			await Received.InvokeAsync(None.Default);
		}
	}

	public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? Task.CompletedTask.ToOperation();
}