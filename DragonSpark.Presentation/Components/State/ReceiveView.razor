@using DragonSpark.Presentation.Connections
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Model.Operations.Selection.Conditions
@using DragonSpark.Presentation.Components.Content.Rendering
@using System.Diagnostics

@implements IAsyncDisposable

@inject CurrentRenderState State

@code
{
	[Parameter]
	public ISubscribe Registration { get; set; } = default!;

	[Parameter]
	public IDepending<None> Condition { get; set; } = Is.Always<None>().Operation().Out();

	[Parameter]
	public EventCallback<None> Received { get; set; }

	ISubscription? connection;

	protected override Task OnInitializedAsync()
	{
		switch (State.Get())
		{
		    case RenderState.Ready:
			case RenderState.Established:
				connection = Registration.Get(OnReceive);
				return connection.Allocate();
		}

		return base.OnInitializedAsync();
	}

	Task OnReceive() => InvokeAsync(() => Received.InvokeAsync(None.Default));

	public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? ValueTask.CompletedTask;
}