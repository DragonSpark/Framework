@using DragonSpark.Presentation.Connections
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Operations
@implements IAsyncDisposable

@code
{
    IReceiver connection = default!;

    [Parameter]
    public IReceive Registration { get; set; } = default!;

    [Parameter]
    public IDepending<None> Condition { get; set; } = Is.Always<None>().Operation().Out();

    [Parameter]
    public EventCallback<None> Received { get; set; }

    protected override Task OnInitializedAsync()
    {
        connection = Registration.Get(OnReceive);
        connection.Get();

        return base.OnInitializedAsync();
    }

    async Task OnReceive()
    {
        if (await Condition.Get())
        {
            await Received.InvokeAsync(None.Default);
        }
    }

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? Task.CompletedTask.ToOperation();
}