@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Model.Operations.Selection.Conditions
@using DragonSpark.Presentation.Components.Content.Rendering

@implements IAsyncDisposable

@inject RenderStateStore State

@code
{
    readonly static IDepending<None> DefaultCondition = Is.Always<None>().Operation().Out();
    ISubscription?                   connection;
    Func<Task>                       _receive = null!;

    [Parameter]
    public ISubscribe Registration { get; set; } = default!;

    [Parameter]
    public IDepending<None> Condition { get; set; } = DefaultCondition;

    [Parameter]
    public EventCallback<None> Received { get; set; }

    protected override Task OnInitializedAsync()
    {
        switch (State.Get())
        {
            case RenderState.Ready:
            case RenderState.Established:
                _receive = OnReceive;
                connection = Registration.Get(OnReceiveStart);
                return connection.Allocate();
        }

        return base.OnInitializedAsync();
    }

    Task OnReceiveStart() => InvokeAsync(_receive);

    Task OnReceive() => State.Get() switch
    {
        RenderState.Destroyed => Task.CompletedTask,
        _ => Received.InvokeAsync(None.Default)
    };

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? ValueTask.CompletedTask;
}