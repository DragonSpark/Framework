@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Model.Operations.Selection.Conditions
@using DragonSpark.Presentation.Components.Content.Rendering

@implements IAsyncDisposable

@inject RenderStateStore State

@code
{
    Func<Task> _receive = null!;

    [Parameter]
    public ISubscribe Registration { get; set; } = default!;

    [Parameter]
    public IDepending<None> Condition { get; set; } = Is.Always<None>().Operation().Out();

    [Parameter]
    public EventCallback<None> Received { get; set; }

    ISubscription? connection;

    protected override Task OnInitializedAsync()
    {
        switch (State.Get())
        {
            case RenderState.Ready:
            case RenderState.Established:
                _receive = OnReceive;
                connection = Registration.Get(OnReceiveStart);
                return connection.Allocate();
        }

        return base.OnInitializedAsync();
    }

    Task OnReceiveStart() => InvokeAsync(_receive);

    Task OnReceive()
    {
        switch (State.Get())
        {
            case RenderState.Destroyed:
                return Task.CompletedTask;
        }
        return Received.InvokeAsync(None.Default);
    }

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? ValueTask.CompletedTask;
}