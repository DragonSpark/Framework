@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Presentation.Components.Content.Rendering

@typeparam T

@implements IAsyncDisposable

@inject CurrentRenderState State

@if (Establishing)
{
    <DragonSpark.Presentation.Components.State.TimerComponent
        AutoStart="true"
        Interval="@TimeSpan.FromSeconds(1)"
        Updated="@OnElapsed"
    />
}

<ReceiveParameterView T="T" Registration="@Registration" Condition="@Condition" Received="@OnReceive" />

@code
{
    ISubscription? connection;

    [Parameter]
    public ISubscribe<T> Registration { get; set; } = default!;

    [Parameter]
    public IDepending<T> Condition { get; set; } = Is.Always<T>().Operation().Out();

    [Parameter]
    public EventCallback<T> Received { get; set; }

    [Parameter]
    public EventCallback Ready { get; set; }

    bool Enabled { get; set; } = true;

    bool Establishing { get; set; }

    protected override Task OnInitializedAsync()
    {
        var state = State.Get();
        switch (state)
        {
            case RenderState.Default:
                Enabled = false;
                break;
            default:
                Establishing = state == RenderState.Ready;
                return Initialized();
        }

        return base.OnInitializedAsync();
    }

    Task Initialized()
    {
        connection = Registration.Get(OnReceive);
        return connection.Get().AsTask();
    }

    async Task OnReceive(T parameter)
    {
        Enabled = false;

        if (await Condition.Get(parameter))
        {
            await Received.InvokeAsync(parameter);
        }
    }

    Task OnElapsed() => Establishing && Enabled ? Ready.InvokeAsync(this) : Task.CompletedTask;

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? Task.CompletedTask.ToOperation();
}