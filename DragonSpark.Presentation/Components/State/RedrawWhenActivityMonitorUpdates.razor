@using DragonSpark.Compose
@using DragonSpark.Model.Results

<DragonSpark.Presentation.Components.Eventing.HandlerView T="ActivityUpdatedMessage" Received="@_update" />

@ChildContent(Monitor?.Active ?? false)

@code {
    readonly Switch _active = new();

    EventCallback<ActivityUpdatedMessage> _update;

    protected override void OnInitialized()
    {
        _update = Start.A.Callback<ActivityUpdatedMessage>(OnUpdate).Hide();
        base.OnInitialized();
    }

    [Parameter]
    public RenderFragment<bool> ChildContent { get; set; } = default!;

    [CascadingParameter] IActivityMonitor? Monitor { get; set; }

    Task OnUpdate(ActivityUpdatedMessage parameter)
    {
        var (owner, active) = parameter;
        if (owner == Monitor && _active.Assign(active))
        {
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

}
