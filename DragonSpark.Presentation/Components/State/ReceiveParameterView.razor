@using DragonSpark.Presentation.Connections
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Presentation.Components.Content.Rendering
@implements IAsyncDisposable
@typeparam T

@inject SessionRenderState State
@code
{
    IReceiver? connection = default!;

    [Parameter]
    public IReceive<T> Registration { get; set; } = default!;

    [Parameter]
    public IDepending<T> Condition { get; set; } = Is.Always<T>().Operation().Out();

    [Parameter]
    public EventCallback<T> Received { get; set; }

    protected override Task OnInitializedAsync()
    {
        switch (State.Get())
        {
            case RenderState.Default:
                break;
            default:
                connection = Registration.Get(OnReceive);
                connection.Get();
                break;
        }
        return base.OnInitializedAsync();
    }

    async Task OnReceive(T parameter)
    {
        if (await Condition.Get(parameter))
        {
            await Received.InvokeAsync(parameter);
        }
    }

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? Task.CompletedTask.ToOperation();
}