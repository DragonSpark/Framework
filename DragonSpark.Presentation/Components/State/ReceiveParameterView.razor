@using DragonSpark.Presentation.Connections
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Presentation.Components.Content.Rendering

@typeparam T

@implements IAsyncDisposable

@inject CurrentRenderState State

@code
{
    IOperation<T> _operation = default!;
    ISubscription? connection = default!;

    [Parameter]
    public ISubscribe<T> Registration { get; set; } = default!;

    [Parameter]
    public IDepending<T> Condition { get; set; } = Is.Always<T>().Operation().Out();

    [Parameter]
    public EventCallback<T> Received { get; set; }

    protected override Task OnInitializedAsync()
    {
        switch (State.Get())
        {
            case RenderState.Ready:
            case RenderState.Established:
                connection = Registration.Get(OnReceive);
                _operation = new ImmediateOrThrottle<T>(OnProcess, TimeSpan.FromMilliseconds(250));
                return connection.Allocate();
        }

        return base.OnInitializedAsync();
    }

    async Task OnReceive(T parameter)
    {
        if (await Condition.Get(parameter))
        {
            await InvokeAsync(() => _operation.Get(parameter).AsTask()).ConfigureAwait(false);
        }
    }

    ValueTask OnProcess(T parameter) => Received.InvokeAsync(parameter).ToOperation();

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? Task.CompletedTask.ToOperation();
}