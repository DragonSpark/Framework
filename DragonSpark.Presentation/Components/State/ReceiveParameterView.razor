@using DragonSpark.Presentation.Connections
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Connections.Client
@using DragonSpark.Presentation.Components.Content.Rendering
@typeparam T

@implements IAsyncDisposable

@inject CurrentRenderState State

@if (connection is not null)
{
    <DragonSpark.Presentation.Components.State.TimerComponent
        AutoStart="true"
        Interval="TimeSpan.FromSeconds(1.5)"
        Updated="@OnElapsed"
    />
}

@code
{
    IReceiver? connection = default!;
    EventCallback<T> _received;

    [Parameter]
    public IReceive<T> Registration { get; set; } = default!;

    [Parameter]
    public IDepending<T> Condition { get; set; } = Is.Always<T>().Operation().Out();

    [Parameter]
    public EventCallback<T> Received { get; set; }

    [Parameter]
    public EventCallback Ready { get; set; }

    [Parameter]
    public TimeSpan Throttle { get; set; } = TimeSpan.FromMilliseconds(250);

    bool Enabled { get; set; } = true;

    protected override Task OnInitializedAsync()
    {
        switch (State.Get())
        {
            case RenderState.Default:
                Enabled = false;
                break;
            default:
                _received = Start.A.Callback<T>(Invoke).Throttle(Throttle);
                connection = Registration.Get(OnReceive);
                return connection.Get().AsTask();
        }
        return base.OnInitializedAsync();
    }

    async Task OnReceive(T parameter)
    {
        Enabled = false;
        if (await Condition.Get(parameter))
        {
            await _received.InvokeAsync(parameter);
        }
    }

    Task Invoke(T parameter) => Received.InvokeAsync(parameter);

    Task OnElapsed() => Enabled ? Ready.InvokeAsync(this) : Task.CompletedTask;

    public ValueTask DisposeAsync() => connection?.DisposeAsync() ?? Task.CompletedTask.ToOperation();
}