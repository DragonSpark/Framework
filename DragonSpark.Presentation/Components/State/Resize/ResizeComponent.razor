@using DragonSpark.Presentation.Browser
@using ValueTask = System.Threading.Tasks.ValueTask
@using DragonSpark.Compose
@using DragonSpark.Application.Diagnostics

@implements IAsyncDisposable
@inject ResizeMonitors Modules

@code
{
	[Parameter]
	public EventCallback<ushort> Callback { get; set; }

	[Parameter]
	public IElementReference Element { get; set; } = default!;

	IResizeMonitor? Module { get; set; }

	ElementReference? Added { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Module ??= await Modules.Get(Callback);
			var reference = Element.Get();
			Added = reference is not null && await Module.Add(reference.Value).ConfigureAwait(false) ? reference.Value : null;
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (Module is not null)
		{
			if (Added.HasValue)
			{
				await Module.Remove(Added.Value).ConfigureAwait(false);
			}
			await Module.DisposeAsync().ConfigureAwait(false);
			Module = null;
		}
	}
}
