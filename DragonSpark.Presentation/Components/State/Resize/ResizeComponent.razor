@inject ResizeMonitors Modules

@using DragonSpark.Presentation.Browser
@using ValueTask = System.Threading.Tasks.ValueTask
@using DragonSpark.Compose
@using DragonSpark.Application.Diagnostics

@implements IAsyncDisposable
@inject IExceptionLogger Logger

@code
{
	[Parameter]
	public EventCallback<ushort> Callback { get; set; }

	[Parameter]
	public IElementReference Element { get; set; } = default!;

	IResizeMonitor? Module { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Module ??= await Modules.Get(Callback);
		}

		if (Module != null)
		{
			var reference = Element.Get();
			if (reference is not null)
			{
				try
				{
					await Module.Add(reference.Value);
				}
				catch (JSException e)
				{
					await Logger.Await(new ExceptionInput(GetType(), e));
				}
			}
		}

	}

	public async ValueTask DisposeAsync()
	{
		if (Module is not null)
		{
			var element = Element.Get();
			if (element != null)
			{
				await Module.Remove(element.Value).ConfigureAwait(false);
			}
			await Module.DisposeAsync().ConfigureAwait(false);
			Module = null;
		}
	}
}
