@using DragonSpark.Compose
@using DragonSpark.Model.Commands
@using DragonSpark.Model.Results
@using DragonSpark.Presentation.Environment.Browser.Document
@using NetFabric.Hyperlinq
@using System.Buffers
@rendermode InteractiveServer
@inherits Components.ComponentBase

@implements IActivityReceiver
@implements IAsyncDisposable

@inject IFocusedElement Focus

<div class="@_outer">
    <div class="@_class">
        <fieldset disabled="@Active">
            <ShouldRenderComponent Enabled="@Render">
                <CascadingValue TValue="IActivityReceiver" Value="@this" IsFixed="true" ChildContent="@_content" />
            </ShouldRenderComponent>
        </fieldset>
    </div>
    @if (Active && _options.Message is not null)
    {
        <div class="position-absolute top-0 d-flex w-100 h-100 flex-column align-items-center justify-content-center">
            <div class="d-flex gap-2">
                <div class="spinner-border" role="status"></div>
                <div>@(_displaying ? "Please wait..." : _options.Message)</div>
            </div>
            @if (_options.Handle is not null && !_displaying)
            {
                <ul class="actions">
                    <li><button class="small button" disabled="@_displaying" @onclick="@OnCancel">Cancel</button></li>
                </ul>
            }
        </div>
    }
</div>

@code
{
    readonly List<IRenderAware> _renderings = new();
    readonly Switch             _rendered   = new(), _restore = new(), _displaying = new(), _active = new(), _render = new(true);
    Renderings                  _membership = null!;
    ActivityOptions             _options    = ActivityOptions.Default;
    RenderFragment              _content    = null!;
    string?                     _class, _outer;

    protected override void OnInitialized()
    {
        _membership = new(_renderings);
        _content    = ChildContent(this);
        Monitor?.Add.Execute(this);
        base.OnInitialized();
    }

    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    [Parameter]
    public string ActiveStyle { get; set; } = "dragonspark-activity-active";

    [Parameter]
    public RenderFragment<IActivityReceiver> ChildContent { get; set; } = null!;

    [CascadingParameter] IActivityMonitor? Monitor { get; set; }

    string? Class()
    {
        var start  = Active ? $"{ActiveStyle} {CssClass}" : CssClass;
        var result = start.Trim().NullIfEmpty();
        return result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _rendered.Up();
        if (_restore.Down())
        {
            await Focus.Restore.Get();
            if (Monitor is not null)
            {
                await Monitor.Off();
            }
        }
    }

    bool Render => !_active && (_render || !_render.Up());

    public bool Active => _active;

    bool Update() => Update(_options);

    bool Update(ActivityOptions parameter)
    {
        var active = ActiveState.Default.Get(this);
        var result = _active.Assign(active);
        if (result)
        {
            _class = Class();
            _outer = active && parameter.Message is not null ? "position-relative" : string.Empty;
        }
        return result;
    }

    public async ValueTask Start(ActivityOptions parameter)
    {
        if (Update(parameter))
        {
            _options = parameter;

            if (_rendered)
            {
                await Focus.Store.Get();
            }
            if (Monitor is not null)
            {
                await Monitor.Off();
            }

            using var renderings = _renderings.AsValueEnumerable().ToArray(ArrayPool<IRenderAware>.Shared);
            foreach (var i in renderings)
            {
                i.Execute();
            }
        }
    }

    public async ValueTask Complete(bool refresh = false)
    {
        var update = Update();
        _restore.Execute(update);
        if (update)
        {
            _displaying.Down();

            if (Monitor is not null)
            {
                await Monitor.Get();
            }
            if (refresh)
            {
                StateHasChanged();
            }
            else if (!_options.RenderOnCompletion)
            {
                _render.Down();
            }
        }
    }

    Task OnCancel()
    {
        var handle = _options.Handle;
        if (handle is not null)
        {
            _displaying.Up();
            return handle.Allocate();
        }
        return Task.CompletedTask;
    }

    public ValueTask DisposeAsync()
    {
        Monitor?.Remove.Execute(this);
        return Focus.DisposeAsync();
    }

    public ICommand<IRenderAware> Add => _membership.Add;

    public ICommand<IRenderAware> Remove => _membership.Remove;
}