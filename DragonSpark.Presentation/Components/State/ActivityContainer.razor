@using DragonSpark.Presentation.Compose
@using Majorsoft.Blazor.Components.Common.JsInterop.Focus
@using System.Diagnostics

@inject IFocusHandler Focus

@implements IActivityReceiver

<div class="@(Active ? ActiveStyle : null)">
	<fieldset disabled="@Active">
		<CascadingValue TValue="IActivityReceiver" Value="@this">
			@ChildContent(ActualReceiver)
		</CascadingValue>
	</fieldset>
</div>

@code
{
	bool Active { get; set; }

	[Parameter]
	public string ActiveStyle { get; set; } = "dragonspark-activity-active";

	[Parameter]
	public object? Receiver { get; set; }

	[Parameter]
	public RenderFragment<object> ChildContent { get; set; } = default!;


	[Parameter]
	public EventCallback Started { get; set; }

	[Parameter]
	public EventCallback Completed { get; set; }

	object ActualReceiver => Receiver ?? this;

	protected override void OnParametersSet()
	{
		Update();

		base.OnParametersSet();
	}

	// ReSharper disable once FlagArgument
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Allowed = true;
		if (!firstRender && Restore)
		{
			Restore = false;
			await Focus.RestoreStoredElementFocusAsync();
		}
	}

	bool Allowed { get; set; }

	bool Restore { get; set; }

	void Update()
	{
		Active = IsActive.Default.Get(ActualReceiver);
	}

	public async ValueTask Start()
	{
		if (Allowed)
		{
			await Focus.StoreFocusedElementAsync();
		}

		await Started.InvokeAsync();
		Update();
		StateHasChanged();
	}

	public async ValueTask Complete()
	{
		Update();
		await Completed.InvokeAsync();
		StateHasChanged();
		Restore = true;
	}
}