@using DragonSpark.Presentation.Compose
@using DragonSpark.Presentation.Browser
@using System.Diagnostics
@using DragonSpark.Compose

@inherits DragonSpark.Presentation.Components.ComponentBase

@implements IActivityReceiver
@implements IAsyncDisposable

@inject IFocusedElement Focus

<div class="@(Active ? ActiveStyle : null)">
	<fieldset disabled="@Active">
		<CascadingValue TValue="IActivityReceiver" Value="@this">
			@ChildContent(ActualReceiver)
		</CascadingValue>
	</fieldset>
</div>

@code
{
		bool Active { get; set; }

		[Parameter]
		public string ActiveStyle { get; set; } = "dragonspark-activity-active";

		[Parameter]
		public object? Receiver { get; set; }

		[Parameter]
		public RenderFragment<object> ChildContent { get; set; } = default!;

		object ActualReceiver => Receiver ?? this;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Allowed = true;
		if (Restore)
		{
			Restore = false;
			await Focus.Restore.Await();
		}
	}

	bool Allowed { get; set; }

	bool Restore { get; set; }

	bool Update()
	{
		var active = IsActive.Default.Get(ActualReceiver);
		var result = active != Active;
		Active = active;
		return result;
	}

	public async ValueTask Start()
	{
		if (Allowed)
		{
			await Focus.Store.Await();
		}
		if (Update())
		{
			await RefreshState().ConfigureAwait(false);
		}
	}

	public async ValueTask Complete()
	{
		Restore = Update();
		if (Restore)
		{
			await RefreshState().ConfigureAwait(false);
		}
	}

	public ValueTask DisposeAsync() => Focus.DisposeAsync();

}