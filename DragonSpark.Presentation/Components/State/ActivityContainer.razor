@using DragonSpark.Presentation.Compose
@using System.Diagnostics
@using DragonSpark.Compose
@using DragonSpark.Model
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation.Environment.Browser
@using DragonSpark.Presentation.Environment.Browser.Document

@inherits DragonSpark.Presentation.Components.ComponentBase

@implements IActivityReceiver
@implements IAsyncDisposable

@inject IFocusedElement Focus

<div class="@Class">
	<fieldset disabled="@_active">
		<CascadingValue TValue="IActivityReceiver" Value="@this" IsFixed="true">
			@ChildContent(ActualReceiver)
		</CascadingValue>
	</fieldset>
</div>

@code
{
	bool _active;

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

	[Parameter]
	public string ActiveStyle { get; set; } = "dragonspark-activity-active";

	[Parameter]
	public object? Receiver { get; set; }

	[Parameter]
	public RenderFragment<object> ChildContent { get; set; } = default!;

	string? Class
	{
		get {
			var start = _active ? ActiveStyle : null;
			var result = $"{start} {CssClass}".Trim().NullIfEmpty();
			return result;
		}
	}

	object ActualReceiver => Receiver ?? this;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Allowed = true;
		if (Restore)
		{
			Restore = false;
		    await Focus.Restore.Await();
		}
	}

	bool Allowed { get; set; }

	bool Restore { get; set; }

	bool Update()
	{
		var active = IsActive.Default.Get(ActualReceiver);
		var result = active != _active;
		_active = active;
		return result;
	}

	public async ValueTask Start()
	{
		if (Update())
		{
			if (Allowed)
			{
				await Focus.Store.Get();
			}
			await RefreshState().ConfigureAwait(false);
		}
	}

	public ValueTask Complete()
	{
		Restore = Update();
		return RefreshState();
	}

	public ValueTask DisposeAsync() => Focus.DisposeAsync();
}