@using DragonSpark.Model

@inherits EditorComponent

<FieldModelMonitor Changed="@OnUpdate" />

<ConfirmResultContext T="None" @ref="_confirm" Title="@Title" PrimaryClass="primary button fit" SecondaryClass="button fit">
    @ChildContent
</ConfirmResultContext>

@if (_enabled)
{
    <BrowserUnloadMonitor />
}

@code
{
    bool _enabled;

    protected override void OnParametersSet()
    {
        Update();
        base.OnParametersSet();
    }

    void Update()
    {
        _enabled = HasChanges();
    }

    ConfirmResultContext<None> _confirm = default!;

	[Parameter]
	public string Title { get; set; } = "Changes Detected";

	[Parameter]
	public RenderFragment ChildContent { get; set; }
		= @<p>Changes have been detected on this page and will be lost if you leave.  Press OK to leave, press Cancel to stay on this page.</p>;

	[Parameter]
	public object? Receiver { get; set; }

	[Parameter]
	public bool Enabled { get; set; } = true;

    [Parameter]
    public EventCallback Updated { get; set; }

	[CascadingParameter]
	IActivityReceiver DefaultReceiver { get; set; } = default!;

	object ActualReceiver => Receiver ?? DefaultReceiver;

    protected override async ValueTask<bool> Allow(LocationChangingContext parameter)
        => !Enabled || await base.Allow(parameter) || await _confirm.Confirm(None.Default) == DialogResult.Ok;

    protected override bool HasChanges() => Enabled && base.HasChanges();

    Task OnUpdate()
    {
        Update();
        return Updated.InvokeAsync();
    }
}