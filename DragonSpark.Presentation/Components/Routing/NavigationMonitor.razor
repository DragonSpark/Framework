@using DragonSpark.Compose
@using DragonSpark.Model.Results

@inherits Components.ComponentBase
@implements IDisposable

@inject NavigationManager Manager

@code {
    readonly Switch                                 _update = new();
	readonly EventHandler<LocationChangedEventArgs> _changed;

	public NavigationMonitor() => _changed = OnChanged;

    [Parameter]
    public EventCallback Changed { get; set; }

	protected override Task OnInitializedAsync()
	{
	    Manager.LocationChanged += _changed;
		return base.OnInitializedAsync();
	}

	void OnChanged(object? sender, EventArgs e)
	{
        _update.Up();
	    StateHasChanged();
	}

    protected override Task OnAfterRenderAsync(bool firstRender)
        => _update.Down() ? Changed.Invoke() : base.OnAfterRenderAsync(firstRender);

    public void Dispose()
    {
        Manager.LocationChanged -= _changed;
    }

}
