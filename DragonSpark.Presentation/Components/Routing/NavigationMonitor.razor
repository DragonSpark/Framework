@using DragonSpark.Compose

@inherits Components.ComponentBase
@implements IDisposable

@inject NavigationManager Manager

@code {
    readonly EventHandler<LocationChangedEventArgs> _changed;

    public NavigationMonitor() => _changed = OnChanged;

    [Parameter]
    public EventCallback Changed { get; set; }

    protected override Task OnInitializedAsync()
    {
        Manager.LocationChanged += _changed;
        return base.OnInitializedAsync();
    }

    // ReSharper disable once AvoidAsyncVoid -- booooo!
    async void OnChanged(object? sender, EventArgs e)
    {
        try
        {
            await Changed.Invoke().Off();
        }
        catch (Exception error)
        {
            await Exceptions.Off(new(GetType(), error));
        }
    }

    public void Dispose()
    {
        Manager.LocationChanged -= _changed;
    }

}
