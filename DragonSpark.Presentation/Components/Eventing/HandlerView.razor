@using DragonSpark.Compose
@using DragonSpark.Model.Operations.Selection.Conditions
@using DragonSpark.Presentation.Components.Content.Rendering
@typeparam T

@implements IHandle<T>
@implements IDisposable

@inject IEventAggregator Events
@inject RenderStateStore State

@code
{
	[Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public IDepending<T> Condition { get; set; } = Is.Always<T>().Operation().Out();

	[Parameter]
	public EventCallback<T> Received { get; set; }

	protected override Task OnInitializedAsync()
	{
	    switch (State.Get())
	    {
	        case RenderState.Default:
	            break;
	        default:
	            Events.Subscribe(this);
	            break;
	    }
		return Task.CompletedTask;
	}

	public async Task HandleAsync(T parameter)
	{
	    if (Enabled && await Condition.Get(parameter))
		{
		    await InvokeAsync(() => Received.InvokeAsync(parameter));
		}
	}

	public void Dispose()
	{
		Events.Unsubscribe(this);
	}
}