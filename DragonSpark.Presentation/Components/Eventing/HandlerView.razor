@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@typeparam T

@implements IHandle<T>
@implements IDisposable

@inject IEventAggregator Events


@code
{
	[Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public IDepending<T> Condition { get; set; } = Is.Always<T>().Operation().Out();

	[Parameter]
	public EventCallback<T> Received { get; set; }

	protected override Task OnInitializedAsync()
	{
		Events.Subscribe(this);
		return Task.CompletedTask;
	}

	public async Task HandleAsync(T parameter)
	{
	    var b = await Condition.Get(parameter);
	    if (Enabled && b)
		{
			await InvokeAsync(() => Received.InvokeAsync(parameter));
		}
	}

	public void Dispose()
	{
		Events.Unsubscribe(this);
	}
}