@using DragonSpark.Compose
@using DragonSpark.Model.Operations.Selection.Conditions

@typeparam T

@implements IHandle<T>
@implements IDisposable

@inject IEventAggregator Events

@code
{
    readonly static IDepending<T> Default = Is.Always<T>().Operation().Out();

    [Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public IDepending<T> Condition { get; set; } = Default;

	[Parameter]
	public EventCallback<T> Received { get; set; }

    protected override void OnInitialized()
    {
        Events.Subscribe(this);
        base.OnInitialized();
    }

    public async Task HandleAsync(T parameter)
	{
		if (Enabled && await Condition.Get(parameter))
		{
			await InvokeAsync(() => Received.Invoke(parameter));
		}
	}

	public void Dispose()
	{
		Events.Unsubscribe(this);
	}
}