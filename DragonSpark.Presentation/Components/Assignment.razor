@using DragonSpark.Model.Results
@using DragonSpark.Compose
@typeparam T

@code {
    readonly Switch _update = new();

    [Parameter]
    public T Value
    {
        get;
        set
        {
            if (!Comparer.Equals(field, value))
            {
                field = value;
                _update.Up();
            }
        }
    } = default!;

    [Parameter]
    public IEqualityComparer<T> Comparer { get; set; } = EqualityComparer<T>.Default;

    [Parameter]
    public EventCallback<T> Updated { get; set; }

    protected override Task OnParametersSetAsync()
        => _update.Down() ? Updated.Invoke(Value) : base.OnParametersSetAsync();
}