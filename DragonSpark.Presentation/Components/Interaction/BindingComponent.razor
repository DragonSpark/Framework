@using DragonSpark.Compose
@using DragonSpark.Model.Results
@using DragonSpark.Model.Selection

@typeparam T

@ChildContent(_binding)

@code {
    readonly Switch  _requested = new(), _rendered = new();
    string?          _content;
    Binding<string?> _binding = null!;

    [Parameter]
    public ISelect<T, string> Formatter { get; set; } = null!;

    [Parameter]
    public ISelect<string, T> Parser { get; set; } = null!;

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    public IEqualityComparer<string?> Comparer { get; set; } = StringComparer.CurrentCulture;

    [Parameter]
    public RenderFragment<Binding<string?>> ChildContent { get; set; } = null!;

    protected override void OnInitialized()
    {
        _content = Value is not null ? Formatter.Get(Value) : null;
        _binding = new Binding<string?>(_content, RequestUpdate, Comparer);
        base.OnInitialized();
    }

    void RequestUpdate(string? parameter)
    {
        _content = parameter;
        _requested.Up();
        if (_rendered)
        {
            StateHasChanged();
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _rendered.Up();
        return _requested.Down() ? Update() : base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnParametersSetAsync() => _requested.Down() ? Update() : OnParametersSetAsync();

    Task Update() => ValueChanged.Invoke(Value = !string.IsNullOrEmpty(_content) ? Parser.Get(_content) : default);

}