@* ReSharper disable UnknownCssClass *@
@inherits RadzenComponent

@using DragonSpark.Compose
@using JetBrains.Annotations
@using DragonSpark.Application.Runtime

@inject DialogService Dialogs
@inject IExceptions Exceptions

<RadzenCard Style="padding: 20px;" @onkeyup="LogKeyPressed">
    <ActivityContainer Context="receiver">
        <p style="margin-bottom: 25px;">@ChildContent</p>
        <div class="container">
            <div class="d-flex justify-content-between">
                <ButtonComponent id="@UniqueID" Text="@SecondaryText" Click="OnCancel" ButtonStyle="ButtonStyle.Secondary"
                                 Style="margin: 10px; width: 150px" class="@SecondaryClass" />

                <ButtonComponent Text="@PrimaryText" Click="@(Exceptions.Bind<MouseEventArgs>(OnAccept).Using(receiver).UpdateActivity())"
                                 Style="margin: 10px; width: 150px" class="@PrimaryClass" />
            </div>
        </div>
    </ActivityContainer>
</RadzenCard>

<Evaluate>document.getElementById("@UniqueID").focus();</Evaluate>

@code
{
    protected override Task OnInitializedAsync() => Opened.InvokeAsync();

    async Task OnAccept(MouseEventArgs parameter)
    {
        if (await Confirmation())
        {
            await Accept.InvokeAsync(parameter);
            Dialogs.Close();
        }
    }

    async Task OnCancel(MouseEventArgs parameter)
    {
        await Cancel.InvokeAsync(parameter);
        Dialogs.Close();
    }

    [Parameter]
    public string PrimaryText { get; set; } = "OK";

    [Parameter]
    public string SecondaryText { get; set; } = "Cancel";

    [Parameter]
    public string PrimaryClass { get; set; } = default!;

    [Parameter]
    public string SecondaryClass { get; set; } = default!;

    [Parameter]
    public Func<ValueTask<bool>> Confirmation { get; set; } = () => true.ToOperation();

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public EventCallback Opened { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Accept { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Cancel { get; set; }

    void LogKeyPressed(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Code)
        {
            case "Escape":
                InvokeAsync(() => OnCancel(null!));
                break;
        }
    }

}