@typeparam T
@using DragonSpark.Compose
@using DragonSpark.Model
@implements IAdjustmentContainer<T>

<CascadingValue TValue="IAdjustmentContainer<T>" Value="@this">
    @ChildContent(Query)
</CascadingValue>


@code {

    readonly ICollection<IAdjust<T>> _adjustments = new List<IAdjust<T>>();

    [Parameter]
    public RenderFragment<IQueryable<T>> ChildContent { get; set; } = default!;

    [Parameter]
    public IQueryable<T> Input { get; set; } = default!;

    IQueryable<T> Query { get; set; } = default!;

    protected override void OnInitialized()
    {
        Query = _adjustments.Alter(Input);
        base.OnInitialized();
    }

    public IDisposable Get(IAdjust<T> element)
    {
        _adjustments.Add(element);
        var result = new Adjustment<T>(_adjustments, element);
        return result;
    }

    public void Execute(None _)
    {
        Query = _adjustments.Alter(Input);
        StateHasChanged();
    }

}