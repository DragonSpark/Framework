@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Forms.Validation
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Filled
@using Microsoft.FluentUI.AspNetCore.Components.Utilities

@inherits FluentComponentBase

<li id="@Id" status="@Status.ToAttributeValue()"
@onclick="@OnClickHandlerAsync"
disabled="@Disabled"
class="@ClassValue" style="@StyleValue" @attributes="@AdditionalAttributes">
    @if (StepTemplate is null)
    {
        <div class="fluent-wizard-icon">
            <FluentIcon Value="@StepIcon" Style="@IconStyle" />

            @if (DisplayStepNumber ?? FluentWizard.DisplayStepNumber.HasFlag(Status))
            {
                <div class="fluent-wizard-icon-number" disabled="@Disabled" status="@Status.ToAttributeValue()">
                    @(Index + 1)
                </div>
            }
        </div>
        <div hidden-when="@FluentGridItem.GetHiddenAttribute(FluentWizard.StepTitleHiddenWhen)">
            <FluentLabel Class="fluent-wizard-title" Typo="Typography.Body" Disabled="@Disabled">@Label</FluentLabel>
            <FluentLabel Class="fluent-wizard-summary" Typo="Typography.Body" Disabled="@Disabled">@Summary</FluentLabel>
        </div>
    }
    else
    {
        @StepTemplate(new WizardStepArgs(Index, FluentWizard.Value))
    }
</li>
@code {
    private readonly HashSet<EditForm> _editForms = new ();

    /// <summary />
    protected string? ClassValue => new CssBuilder(Class).Build();

    /// <summary />
    protected string? StyleValue => new StyleBuilder(Style)
        .AddStyle("max-width", FluentWizard.StepperBulletSpace ?? "100%", when: FluentWizard.StepperPosition == StepperPosition.Top)
        .AddStyle("height", FluentWizard.StepperBulletSpace ?? "100%", when: FluentWizard.StepperPosition == StepperPosition.Left)
        .AddStyle("cursor", "pointer", when: IsStepClickable)
        .Build();

    [Parameter]
    public WizardButtonsLocation? ButtonsDisplay { get; set; }

    /// <summary>
    /// Gets or sets the content of the step.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the template of the step icon.
    /// </summary>
    [Parameter]
    public RenderFragment<WizardStepArgs>? StepTemplate { get; set; }

    /// <summary>
    /// Gets the step index.
    /// </summary>
    public int Index { get; private set; }

    /// <summary>
    /// Gets or sets whether the step is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Render the Wizard Step content only when the Step is selected.
    /// </summary>
    [Parameter]
    public bool DeferredLoading { get; set; }

    /// <summary>
    /// Gets or sets the label of the step.
    /// </summary>
    [Parameter]
    public string Label { get; set; } = string.Empty;

    /// <summary>
    /// Display a number the step icon.
    /// By default, this is the <see cref="FluentWizard.DisplayStepNumber"/> value.
    /// </summary>
    [Parameter]
    public bool? DisplayStepNumber { get; set; }

    /// <summary>
    /// The OnChange event fires before the current step has changed.
    /// The EventArgs contains a field of the targeted new step and a field to cancel the build-in action.
    /// </summary>
    [Parameter]
    public EventCallback<WizardStepChangeEventArgs> OnChange { get; set; }

    /// <summary>
    /// Reference to the parent <see cref="FluentWizard"/> component.
    /// For internal use only
    /// </summary>
    [CascadingParameter]
    public Default FluentWizard { get; set; } = default!;

    /// <summary>
    /// Gets or sets the summary of the step, to diplay near the label.
    /// </summary>
    [Parameter]
    public string Summary { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the icon to display for the past/previous step.
    /// By default, it is a checkmark circle.
    /// </summary>
    [Parameter]
    public Icon IconPrevious { get; set; } = new Size24.CheckmarkCircle();

    /// <summary>
    /// Gets or sets the icon to display for the current/active step.
    /// By default, it is a checkmark circle.
    /// </summary>
    [Parameter]
    public Icon IconCurrent { get; set; } = new Size24.Circle();

    /// <summary>
    /// Gets or sets the icon to display for the future/next step.
    /// By default, it is a checkmark circle.
    /// </summary>
    [Parameter]
    public Icon IconNext { get; set; } = new Size24.Circle();

    internal WizardStepStatus Status { get; set; } = WizardStepStatus.Next;

    private string IconStyle => "width: var(--fluent-wizard-circle-size);" +
                                (Disabled ? " fill-opacity: var(--disabled-opacity);" : string.Empty);

    private Icon StepIcon
    {
        get
        {
            switch (Status)
            {
                case WizardStepStatus.Previous:
                    return IconPrevious;

                case WizardStepStatus.Current:
                    return IconCurrent;

                case WizardStepStatus.Next:
                    return IconNext;

                default:
                    return new Size24.Circle();
            }
        }
    }

    /// <summary />
    protected override void OnInitialized()
    {
        if (FluentWizard == null)
        {
            throw new ArgumentException("The FluentWizardStep must be included in the FluentWizard component.");
        }

        Index = FluentWizard.AddStep(this);
        base.OnInitialized();
    }

    public void RegisterEditFormAndContext(EditForm editForm)
    {
        _editForms.Add(editForm);
    }

    public async Task<bool> ValidateEditContexts()
    {
        foreach (var form in _editForms)
        {
            if (!await ValidContext.Default.Get(form.EditContext.Verify()))
            {
                return false;
            }
        }
        return true;
    }

    internal async Task InvokeOnValidSubmitForEditFormsAsync()
    {
        foreach (var editForm in _editForms)
        {
            await editForm.OnValidSubmit.InvokeAsync(editForm.EditContext);
        }
    }

    internal async Task InvokeOnInValidSubmitForEditFormsAsync()
    {
        foreach (var editForm in _editForms)
        {
            await editForm.OnInvalidSubmit.InvokeAsync(editForm.EditContext);
        }
    }

    internal async Task InvokeOnSubmitForEditFormsAsync()
    {
        foreach (var editForm in _editForms)
        {
            await editForm.OnSubmit.InvokeAsync(editForm.EditContext);
        }
    }

    private async Task OnClickHandlerAsync()
    {
        if (!IsStepClickable)
        {
            return;
        }

        await FluentWizard.GoToStepAsync(Index, validateEditContexts: Index > FluentWizard.Value);
    }

    private bool IsStepClickable
    {
        get
        {
            if (Disabled)
            {
                return false;
            }

            if (FluentWizard.Value == Index)
            {
                return false;
            }

            if (FluentWizard.StepSequence == WizardStepSequence.Linear)
            {
                return false;
            }

            return FluentWizard.StepSequence != WizardStepSequence.Visited ||
                   Index <= FluentWizard._maxStepVisited;
        }
    }
}
