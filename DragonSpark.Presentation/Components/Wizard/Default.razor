@using DragonSpark.Compose
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Utilities

@inherits FluentComponentBase

<CascadingValue Value="this" IsFixed="true">
    <div id="@Id"
         style="@StyleValue"
         class="@ClassValue"
         border-outside="@Border.HasFlag(WizardBorder.Outside)"
         position="@(StepperPosition == StepperPosition.Top ? "top" : "left")"
         @attributes="@AdditionalAttributes">
        <ol style="@GetStepperWidthOrHeight()"
            border-inside="@Border.HasFlag(WizardBorder.Inside)">
            @Steps
        </ol>

        @{
            var display = CurrentButtonDisplay;
            var input   = new WizardButtonTemplateInput(Value.Contract().Contract(), false, Value > 0 ? _previous : null, !Active ? Value < _steps.Count - 1 ? _next : _finish : null);
            if (display.HasFlag(WizardButtonsLocation.Top))
            {
                <Buttons Input="@input" Border="@Border" ButtonTemplate="@ButtonTemplate"/>
            }
        }

        <div class="fluent-wizard-content" border-inside="@Border.HasFlag(WizardBorder.Inside)">
            @if (_steps.Count > 0)
            {
                <CascadingValue Value="@_steps[Value]" ChildContent="@_steps[Value].ChildContent" IsFixed="true" />
            }
        </div>
        @if (display.HasFlag(WizardButtonsLocation.Bottom))
        {
            <Buttons Input="@input" Border="@Border" ButtonTemplate="@ButtonTemplate" />
        }
    </div>
</CascadingValue>

@code {
    static   string     LabelButtonPrevious = "Previous", LabelButtonNext = "Next";
    readonly List<Step> _steps              = new();
    int                 _value;
    internal int        _maxStepVisited;
    WizardButtonInput   _previous = default!, _next = default!, _finish = default!;

    protected override void OnInitialized()
    {
        _previous = new(LabelButtonPrevious, Start.A.Callback(OnPreviousHandlerAsync).Hide());
        _next     = new(LabelButtonNext, Start.A.Callback(OnNextHandlerAsync).Hide());
        _finish   = new(LabelButtonDone, Start.A.Callback(OnFinishHandlerAsync).Hide());
        base.OnInitialized();
    }

    /// <summary />
    protected string? ClassValue => new CssBuilder(Class).AddClass("fluent-wizard").Build();

    /// <summary />
    protected string? StyleValue => new StyleBuilder(Style).AddStyle("width", Width).AddStyle("height", Height).Build();

    WizardButtonsLocation CurrentButtonDisplay => (_steps.Count > 0 ? _steps[Value].ButtonsDisplay : null) ?? ButtonsDisplay;

    [Parameter]
    public string LabelButtonDone { get; set; } = "Complete";

    [Parameter]
    public WizardButtonsLocation ButtonsDisplay { get; set; } = WizardButtonsLocation.Both;

    /// <summary>
    /// Gets or sets the height of the wizard.
    /// </summary>
    [Parameter]
    public string Height { get; set; } = "400px";

    /// <summary>
    /// Gets or sets the width of the wizard.
    /// </summary>
    [Parameter]
    public string Width { get; set; } = "100%";

    /// <summary>
    /// Triggers when the done button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback OnFinish { get; set; }

    /// <summary>
    /// Gets or sets the stepper position in the wizard (Top or Left).
    /// </summary>
    [Parameter]
    public StepperPosition StepperPosition { get; set; } = StepperPosition.Left;

    /// <summary>
    /// Gets or sets the stepper width (if position is Left)
    /// or the stepper height (if position is Top).
    /// </summary>
    [Parameter]
    public string? StepperSize { get; set; }

    /// <summary>
    /// Gets or sets the space between two bullets (ex. 120px).
    /// </summary>
    [Parameter]
    public string? StepperBulletSpace { get; set; }

    /// <summary>
    /// Display a border of the Wizard.
    /// </summary>
    [Parameter]
    public WizardBorder Border { get; set; } = WizardBorder.None;

    /// <summary>
    /// Display a number on each step icon. Can be overridden by the step <see cref="FluentWizardStep.DisplayStepNumber"/> property.
    /// </summary>
    [Parameter]
    public WizardStepStatus DisplayStepNumber { get; set; } = WizardStepStatus.None;

    /// <summary>
    /// Gets or sets the step index of the current step.
    /// This value is bindable.
    /// </summary>
    [Parameter]
    public int Value
    {
        get => _value;
        set
        {
            _value          = value;
            _maxStepVisited = Math.Max(_value, _maxStepVisited);

            SetCurrentStatusToStep(_value);
        }
    }

    /// <summary>
    /// Triggers when the value has changed.
    /// </summary>
    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    /// <summary>
    /// Gets or sets the buttons section of the wizard.
    /// This configuration overrides the whole rendering of the bottom-right section of the Wizard,
    /// including the built-in buttons and thus provides a full control over it.
    /// Custom Wizard buttons do not trigger the component OnChange and OnFinish events.
    /// </summary>
    [Parameter]
    public RenderFragment<WizardButtonTemplateInput>? ButtonTemplate { get; set; }

    /// <summary>
    /// Gets or sets the wizard steps. Add WizardStep tags inside this tag.
    /// </summary>
    [Parameter]
    public RenderFragment? Steps { get; set; }

    /// <summary>
    /// Hide step titles and summaries on specified sizes (you can combine several values: GridItemHidden.Sm | GridItemHidden.Xl).
    /// The default value is <see cref="GridItemHidden.XsAndDown"/> to adapt to mobile devices.
    /// </summary>
    [Parameter]
    public GridItemHidden? StepTitleHiddenWhen { get; set; } = GridItemHidden.XsAndDown;

    /// <summary>
    /// Gets or sets the way to navigate in the Wizard Steps.
    /// Default is <see cref="WizardStepSequence.Linear"/>.
    /// </summary>
    [Parameter]
    public WizardStepSequence StepSequence { get; set; } = WizardStepSequence.Linear;

    [CascadingParameter] IActivityMonitor? Monitor { get; set; }
    [CascadingParameter] IActivityReceiver? Receiver { get; set; }

    bool Active => Monitor?.Active ?? (Receiver?.Active ?? false);

    /// <summary />
    protected virtual async Task OnNextHandlerAsync()
    {
        // Target step index
        var targetIndex = Value;
        do
        {
            targetIndex++;
        }
        while (_steps[targetIndex].Disabled && targetIndex < _steps.Count - 1);

        // StepChange event
        var stepChangeArgs = await OnStepChangeHandlerAsync(targetIndex, true);
        var isCanceled = stepChangeArgs.IsCancelled;

        if (isCanceled)
        {
            await ValueChanged.Invoke(Value).Await();
        }
        else
        {
            Value = targetIndex;
        }
    }

    /// <summary />
    protected virtual async Task OnPreviousHandlerAsync()
    {
        // Target step index
        var targetIndex = Value;
        do
        {
            targetIndex--;
        }
        while (_steps[targetIndex].Disabled && targetIndex > 0);

        // StepChange event
        var stepChangeArgs = await OnStepChangeHandlerAsync(targetIndex, false);
        var isCanceled = stepChangeArgs.IsCancelled;

        if (isCanceled)
        {
            await ValueChanged.Invoke(Value).Await();
        }
        else
        {
            Value = targetIndex;
        }
    }

    /// <summary />
    protected virtual async Task<WizardStepChangeEventArgs> OnStepChangeHandlerAsync(int targetIndex, bool validateEditContexts)
    {
        var args = new WizardStepChangeEventArgs(targetIndex, _steps[targetIndex].Label);
        if (validateEditContexts)
        {
            var step = _steps[Value];
            args.IsCancelled = !await step.ValidateEditContexts();

            if (args.IsCancelled)
            {
                await step.InvokeOnInValidSubmitForEditFormsAsync();
                return args;
            }

            await step.InvokeOnValidSubmitForEditFormsAsync();
            await step.InvokeOnSubmitForEditFormsAsync();
        }

        await ValueChanged.InvokeAsync(targetIndex);

        return await OnStepChangeHandlerAsync(args).Await();
    }

    /// <summary />
    protected virtual async Task<WizardStepChangeEventArgs> OnStepChangeHandlerAsync(WizardStepChangeEventArgs args)
    {
        if (_steps[Value].OnChange.HasDelegate)
        {
            await _steps[Value].OnChange.InvokeAsync(args);
        }

        return args;
    }

    /// <summary />
    protected virtual async Task OnFinishHandlerAsync()
    {
        // Validate any form edit contexts
        var valid = await _steps[Value].ValidateEditContexts();
        if (!valid)
        {
            // Invoke the 'OnInvalidSubmit' handlers for the edit forms.
            await _steps[Value].InvokeOnInValidSubmitForEditFormsAsync();
            return;
        }

        // Invoke the 'OnValidSubmit' handlers for the edit forms.
        await _steps[Value].InvokeOnValidSubmitForEditFormsAsync();
        await _steps[Value].InvokeOnSubmitForEditFormsAsync();

        _steps[Value].Status = WizardStepStatus.Previous;

        if (OnFinish.HasDelegate)
        {
            await OnFinish.InvokeAsync();
        }
    }

    internal async Task GoToStepAsync(int targetIndex, bool validateEditContexts)
    {
        var stepChangeArgs = await OnStepChangeHandlerAsync(targetIndex, validateEditContexts);
        var isCanceled = stepChangeArgs.IsCancelled;

        if (!isCanceled)
        {
            Value = targetIndex;
            StateHasChanged();
        }
    }

    internal int AddStep(Step step)
    {
        _steps.Add(step);
        var index = _steps.Count - 1;

        if (index == Value)
        {
            SetCurrentStatusToStep(index);
            StateHasChanged();
        }

        return index;
    }

    // ReSharper disable once ExcessiveIndentation
    private void SetCurrentStatusToStep(int stepIndex)
    {
        for (var i = 0; i < _steps.Count; i++)
        {
            // Step disabled
            if (_steps[i].Disabled)
            {
                _steps[i].Status = WizardStepStatus.Next;
            }

            // Step enabled
            else
            {
                if (i < stepIndex)
                {
                    _steps[i].Status = WizardStepStatus.Previous;
                }
                else if (i == stepIndex)
                {
                    _steps[i].Status = WizardStepStatus.Current;
                }
                else if (i > stepIndex)
                {
                    _steps[i].Status = WizardStepStatus.Next;
                }
                else
                {
                    _steps[i].Status = WizardStepStatus.Next;
                }
            }
        }
    }

    private string? GetStepperWidthOrHeight()
    {
        if (string.IsNullOrEmpty(StepperSize))
        {
            return null;
        }

        switch (StepperPosition)
        {
            case StepperPosition.Top:
                return $"height: {StepperSize}";

            case StepperPosition.Left:
                return $"width: {StepperSize}";
        }

        return null;
    }
}