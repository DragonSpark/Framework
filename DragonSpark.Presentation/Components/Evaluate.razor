@using DragonSpark.Presentation.Environment.Browser
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Diagnostics
@using DragonSpark.Compose
@using DragonSpark.Application
@using DragonSpark.Application.Runtime

@inject IEvaluate Model
@inject IExceptions Exceptions

@code {
	IOperation<string> _call = default!;

	protected override void OnInitialized()
	{
	    var operate = new ExceptionAware<string>(Model, Exceptions, GetType()).Then();
	    _call = new ThrottleOperation<string>(operate, TimeSpan.FromMilliseconds(250)).Then().Then().Out();
		base.OnInitialized();
	}

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string Type { get; set; } = "text/javascript";

	[Parameter]
	public bool Force { get; set; }

	protected override bool ShouldRender() => Force;

	// ReSharper disable once FlagArgument
	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if ((firstRender || Force) && Type == "text/javascript")
		{
			var script = ChildContent?.Text();
			if (!string.IsNullOrEmpty(script))
			{
				return _call.Get(script).AsTask();
			}
		}
		return Task.CompletedTask;
	}
}