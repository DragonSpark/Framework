@using DragonSpark.Presentation.Environment.Browser
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Application.Diagnostics

@inject IEvaluate Model
@inject IExceptions Exceptions

@code {
	IOperation<string> _call = default!;
	protected override void OnInitialized()
	{
		_call = new ThrottleOperation<string>(Exceptions, TimeSpan.FromMilliseconds(250), Invoke);
		base.OnInitialized();
	}

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string Type { get; set; } = "text/javascript";

	[Parameter]
	public bool Force { get; set; }

	protected override bool ShouldRender() => Force;

	// ReSharper disable once FlagArgument
	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if ((firstRender || Force) && Type == "text/javascript")
		{
			var script = ChildContent?.Text();
			if (!string.IsNullOrEmpty(script))
			{
				return _call.Get(script).AsTask();
			}
		}
		return Task.CompletedTask;
	}

	ValueTask Invoke(string parameter) => Model.Get(parameter);

}