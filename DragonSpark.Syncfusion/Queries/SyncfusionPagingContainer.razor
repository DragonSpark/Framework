@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Application.Runtime.Operations
@using DragonSpark.Presentation.Components.Content
@using DragonSpark.Presentation.Components.Content.Sequences
@using DragonSpark.Presentation.Components.Content.Templates
@typeparam T

@inherits DragonSpark.Presentation.Components.Content.Templates.ManyActiveContentTemplateComponentBase<IDataRequest>

<ReportingContentView
	TIn="IDataRequest"
	TOut="IDataRequest"
	Content="@Subject"
	Reporter="@Reporter"
	LoadingTemplate="@LoadingTemplate"
	SubsequentLoadingTemplate="@SubsequentLoadingTemplate"
	ExceptionTemplate="@ExceptionTemplate"
	NotFoundTemplate="@NotFoundTemplate"
>
	@ChildContent(context)
</ReportingContentView>

@code {
	[Parameter]
	public IPaging<T> Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				Subject = null;
			}
		}
	}	IPaging<T> _content = default!;

	[Parameter]
	public IDataRequests<T> Requests { get; set; } = DataRequests<T>.Default;

	[Parameter]
	public IReporter<IDataRequest> Reporter { get; set; } = Queries.Reporter.Default;

    [Parameter]
    public RenderFragment? SubsequentLoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

	IDataRequest? Subject { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= Requests.Get(Content);
	}
}