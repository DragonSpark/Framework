@typeparam T
@using Syncfusion.Blazor.Grids

<GridColumn AutoFit="@AutoFit"
	AllowFiltering="@AllowFiltering"
	AllowSorting="@AllowSorting"
	Format="@Format"
	HeaderText="@HeaderText"
            HeaderTemplate="@_header"
	Field="@Field"
	Width="@Width"
	FilterTemplate="@FilterTemplate"
            Template="@_template"
    ClipMode="@ClipMode"
	Type="@Type"
	HeaderTextAlign="@HeaderTextAlign"
	TextAlign="@TextAlign"
	FilterSettings="@FilterSettings"
/>

@code {
    RenderFragment<object>? _template, _header;

    protected override void OnInitialized()
    {
        _header = HeaderTemplate is not null ? x => HeaderTemplate((T)x) : null;
        _template = Template is not null ? x => Template((T)x) : null;
        base.OnInitialized();

        if (!DisplayFilter)
        {
            Columns.Execute(Field);
        }
    }

    [CascadingParameter]
    ISpecialColumnContainer Columns { get; set; } = default!;

	RenderFragment<object>? ActualTemplate { get; set; }

	[Parameter]
	public RenderFragment<T>? Template { get; set; }

	[Parameter]
	public bool AutoFit { get; set; }

	[Parameter]
	public bool AllowFiltering { get; set; } = true;

	[Parameter]
	public bool AllowSorting { get; set; } = true;

    [Parameter]
    public bool DisplayFilter { get; set; } = true;

	[Parameter]
	public string Format { get; set; } = default!;

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public RenderFragment<T>? HeaderTemplate { get; set; } = default!;

	[Parameter]
	public string Field { get; set; } = string.Empty;

	[Parameter]
	public ColumnType Type { get; set; }

	[Parameter]
	public FilterSettings? FilterSettings { get; set; }

	[Parameter]
	public TextAlign HeaderTextAlign { get; set; } = TextAlign.Left;

	[Parameter]
	public TextAlign TextAlign { get; set; } = TextAlign.Left;

	[Parameter]
	public ClipMode ClipMode { get; set; } = ClipMode.Ellipsis;

    [Parameter]
    public RenderFragment<object> FilterTemplate { get; set; } = default!;
}
