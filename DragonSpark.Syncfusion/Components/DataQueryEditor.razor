@typeparam T

@using BlazorPro.BlazorSize
@using DragonSpark.Application.AspNet.Entities.Queries.Runtime
@using DragonSpark.Application.AspNet.Entities.Queries.Runtime.Shape
@using DragonSpark.Application.Runtime.Operations
@using DragonSpark.Compose
@using DragonSpark.Model.Operations.Stop
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components.Content.Sequences
@using DragonSpark.Presentation.Components.Dialogs
@using DragonSpark.SyncfusionRendering.Entities
@using DragonSpark.SyncfusionRendering.Queries
@using Humanizer
@using Syncfusion.Blazor.Grids

@inherits DragonSpark.Presentation.Components.Content.Templates.ManyActiveContentTemplateComponentBase<IDataRequest>

<DragonSpark.Presentation.Components.State.ActivityReceiverContainer Context="receiver">
        <DragonSpark.SyncfusionRendering.Components.DataQueryContainer
            T="T" Id="@Id" Content="@Content"
            Compose="@Compose" Reporter="@Reporter" Results="@(Is.Always<bool?>().Out())"
            ReportedType="@ReportedType" FilterType="@FilterType" Columns="@Columns" BodyHeaderTemplate="@BodyHeaderTemplate"
            BodyFooterTemplate="@BodyFooterTemplate"
            AllowSelection="true"
            AllowPaging="@AllowPaging" AllowFiltering="@AllowFiltering" AllowSorting="@AllowSorting" Breakpoint="@Breakpoint"
            CssClass="@CssClass"
            DesktopToolbar="@DesktopToolbar"
            MobileToolbar="@MobileToolbar"
            PageSize="@PageSize"
            Editing="@Editing"
            Created="@(Start.A.Callback<T>(OnCreate).Handle(Exceptions, ReportedType).UpdateActivity(receiver))"
            Updated="@(Start.A.Callback<Updated<T>>(OnUpdate).Handle(Exceptions, ReportedType).UpdateActivity(receiver))"
            EmptyElementsTemplate="@EmptyElementsTemplate"
            NotFoundTemplate="@NotFoundTemplate"
            ExceptionTemplate="@ExceptionTemplate"
            HeaderTemplate="@HeaderTemplate"
            FooterTemplate="@FooterTemplate"
            AdditionalAttributes="@AdditionalAttributes"
    >
        <BodyContentTemplate>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" />
            @if(BodyContentTemplate is not null)
            {
                @BodyContentTemplate
            }
        </BodyContentTemplate>
    </DragonSpark.SyncfusionRendering.Components.DataQueryContainer>
</DragonSpark.Presentation.Components.State.ActivityReceiverContainer>

<DragonSpark.Presentation.Components.Dialogs.ConfirmResultContext
    T="T" @ref="_prompt" Title="@ConfirmTitle" PrimaryClass="@ConfirmPrimary" SecondaryClass="@ConfirmSecondary">
    @ConfirmContent(context.Context)
</DragonSpark.Presentation.Components.Dialogs.ConfirmResultContext>

@code {
    ConfirmResultContext<T> _prompt = null!;

    [Parameter]
    public IStopAware<T> Add { get; set; } = null!;

    [Parameter]
    public IStopAware<Updated<T>> Update { get; set; } = null!;

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public IQueries<T> Content {get; set; } = null!;

    [Parameter]
    public ICompose<T> Compose { get; set; } = SyncfusionCompose<T>.Default;

    [Parameter]
    public IReporter<IDataRequest>? Reporter { get; set; } = Queries.Reporter.Default;

    [Parameter]
    public Type? ReportedType { get; set; }

    [Parameter]
    public FilterType FilterType { get; set; } = FilterType.Excel;

    [Parameter]
    public RenderFragment Columns { get; set; } = null!;

    [Parameter]
    public RenderFragment? BodyHeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment? BodyContentTemplate { get; set; }

    [Parameter]
    public RenderFragment? BodyFooterTemplate { get; set; }

    [Parameter]
    public RenderFragment<PagingRenderState<T>>? HeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment<PagingRenderState<T>>? FooterTemplate { get; set; }

    [Parameter]
    public bool AllowPaging { get; set; } = true;

    [Parameter]
    public bool AllowFiltering { get; set; } = true;

    [Parameter]
    public bool AllowSorting { get; set; } = true;

    [Parameter]
    public string Breakpoint { get; set; } = Breakpoints.SmallUp;

    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    [Parameter]
    public ICollection<string>? DesktopToolbar { get; set; } = EditToolbar.Default;

    [Parameter]
    public ICollection<string>? MobileToolbar { get; set; } = EditToolbar.Default;

    [Parameter]
    public ushort PageSize { get; set; } = 10;

    [Parameter]
    public EventCallback<Allow<T>> Editing { get; set; }

    [Parameter]
    public EventCallback<T> Created { get; set; }

    [Parameter]
    public EventCallback<Updated<T>> Updated { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = null!;

    [Parameter]
    public string ConfirmTitle { get; set; } = "Confirm Delete?";

    [Parameter]
    public string ConfirmPrimary { get; set; } = "btn btn-primary";

    [Parameter]
    public string ConfirmSecondary { get; set; } = "btn btn-secondary";

    [Parameter]
    public RenderFragment<T> ConfirmContent { get; set; }
        = _ => y => y.AddContent(0, $"Are you sure you want to delete this {typeof(T).Name.Humanize()}?");

    async Task OnCreate(T parameter)
    {
        await Add.On(new(parameter, Stop));
        await Created.Off(parameter);
    }

    async Task OnUpdate(Updated<T> parameter)
    {
        var (subject, action) = parameter;
        switch (action)
        {
            case "Delete":
                switch (await _prompt.Confirm(subject))
                {
                    case DialogResult.Ok:
                        await Update.On(new(parameter, Stop));
                        await Updated.Off(parameter);
                        break;
                }
                break;
            default:
                await Update.On(new(parameter, Stop));
                await Updated.Off(parameter);
                break;
        }
    }
}
