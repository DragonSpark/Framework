@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Components.State
@using DragonSpark.Syncfusion.Queries
@using global::Syncfusion.Blazor
@using Microsoft.AspNetCore.Components

@typeparam T

@if(State is null)
{

	@LoadingTemplate
}
else
{
	<SfGrid TValue="T"
	        AllowFiltering="@AllowFiltering"
	        AllowPaging="@AllowPaging"
	        AllowSorting="@AllowSorting"
	        Clipping="@ClipMode.EllipsisWithTooltip"
	        Toolbar="@(Matches ? null : DefaultToolbar.Default)"
	        EnableAdaptiveUI="@(!Matches)"
	        RowDirection="@(Matches ? RowDirection.Horizontal :  RowDirection.Vertical)"
	        class="@Class"
	        @attributes="@AdditionalAttributes">
		<GridTemplates LoadingTemplate="@LoadingTemplate" />
		<GridPageSettings PageSize="@PageSize" />
		<GridFilterSettings FilterType="@FilterType" />
		<GridColumns ChildContent="@Columns" />
		@if (ChildContent is not null)
		{
			@ChildContent
		}
	</SfGrid>
}

<MediaQuery Media="@Breakpoint" @bind-Matches="@Matches" />

@code {
	[Parameter]
	public FilterType FilterType { get; set; } = FilterType.Excel;

	[Parameter]
	public RenderFragment Columns { get; set; } = default!;

	[Parameter]
	public RenderFragment LoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

	[Parameter]
	public RenderFragment EmptyElementsTemplate { get; set; } = DefaultEmptySequenceTemplate.Default;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public bool AllowPaging { get; set; } = true;

	[Parameter]
	public bool AllowFiltering { get; set; } = true;

	[Parameter]
	public bool AllowSorting { get; set; } = true;

	[Parameter]
	public ushort PageSize { get; set; } = 10;

	[Parameter]
	public string Breakpoint { get; set; } = Breakpoints.SmallUp;

	[Parameter]
	public string MinimalClass { get; set; } = "dragonspark-minimal";

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AdditionalAttributes { get; set; } = default!;

	bool? State { get; set; }

	bool Matches
	{
		get => State.GetValueOrDefault();
		set => State = value;
	}

	string? Class
	{
		get {
			var start = Matches ? string.Empty : MinimalClass;
			var result = $"{start} {CssClass}".Trim().NullIfEmpty();
			return result;
		}
	}
}
