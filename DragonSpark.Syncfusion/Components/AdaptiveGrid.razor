@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Components.State
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Microsoft.AspNetCore.Components

@typeparam T

@if(State is null)
{
	@LoadingTemplate
}
else
{
	<SfGrid TValue="T"
			@ref="@_subject" AllowSelection="false"
			AllowFiltering="@AllowFiltering"
			AllowPaging="@AllowPaging"
			AllowSorting="@AllowSorting"
			ClipMode="@ClipMode.EllipsisWithTooltip"
			Toolbar="@(Matches ? null : DefaultToolbar.Default)"
			EnableAdaptiveUI="@(!Matches)"
			RowRenderingMode="@(Matches ? RowDirection.Horizontal :  RowDirection.Vertical)"
			DataSource="@DataSource"
			class="@Class"
			@attributes="@AdditionalAttributes">
		<GridPageSettings PageSize="@PageSize" />
		<GridFilterSettings Type="@FilterType" />
		<GridColumns ChildContent="@Columns" />
		@if (ChildContent is not null)
		{
			@ChildContent
		}
	</SfGrid>
}

<MediaQuery Media="@Breakpoint" @bind-Matches="@Matches" />

@code {
	SfGrid<T> _subject = default!;

	[Parameter]
	public FilterType FilterType { get; set; } = FilterType.Excel;

	[Parameter]
	public RenderFragment Columns { get; set; } = default!;

	[Parameter]
	public RenderFragment LoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

	[Parameter]
	public RenderFragment EmptyElementsTemplate { get; set; } = DefaultEmptySequenceTemplate.Default;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public IEnumerable<T>? DataSource { get; set; }

	[Parameter]
	public bool AllowPaging { get; set; } = true;

	[Parameter]
	public bool AllowFiltering { get; set; } = true;

	[Parameter]
	public bool AllowSorting { get; set; } = true;

	[Parameter]
	public ushort PageSize { get; set; } = 10;

	[Parameter]
	public string Breakpoint { get; set; } = Breakpoints.SmallUp;

	[Parameter]
	public string MinimalClass { get; set; } = "dragonspark-minimal";

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AdditionalAttributes { get; set; } = default!;

	public Task Refresh() => _subject.Refresh();

    bool? State { get; set; }

	bool Matches
	{
		get => State.GetValueOrDefault();
		set => State = value;
	}

	string? Class
	{
		get {
			var start = Matches ? string.Empty : MinimalClass;
			var result = $"{start} {CssClass}".Trim().NullIfEmpty();
			return result;
		}
	}
}
