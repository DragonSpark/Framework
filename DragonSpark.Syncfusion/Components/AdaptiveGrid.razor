@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Environment.Browser
@using Syncfusion.Blazor.Grids
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@typeparam T

@implements Model.Operations.Results.IResulting<string>

@inject ProtectedSessionStorage Session

@if(_state is null)
{
    @LoadingTemplate
}
else
{
	<SfGrid TValue="T"
		    @ref="@_subject"
            ID="@Id"
            AllowSelection="@AllowSelection"
			AllowFiltering="@AllowFiltering"
			AllowExcelExport="@AllowExport"
			AllowPaging="@AllowPaging"
			AllowSorting="@AllowSorting"
			ClipMode="@ClipMode.EllipsisWithTooltip"
		    Toolbar="@(Matches ? DesktopToolbar : MobileToolbar)"
			EnableAdaptiveUI="@(!Matches)"
			RowRenderingMode="@(Matches ? RowDirection.Horizontal : RowDirection.Vertical)"
			DataSource="@DataSource"
            class="@Class"
            @attributes="@AdditionalAttributes">
		<GridPageSettings PageSize="@PageSize" />
		<GridFilterSettings Type="@FilterType" />
		<GridColumns ChildContent="@Columns" />
		@if (ChildContent is not null)
		{
			@ChildContent
		}
	</SfGrid>
	<DragonSpark.Presentation.Components.Client.ClientValueComponent T="string" Enabled="@Enabled"
	    Source="@this"
		Store="@_store"
		Initialized="@OnClientInitialized"
	    />
}

<MediaQuery Media="@Breakpoint" @bind-Matches="@Matches" />

@code {
    SfGrid<T>?              _subject;
    IClientVariable<string> _store = default!;
    bool?                   _state;

    protected override void OnInitialized()
    {
        _store = new GridStateVariable(Id, Session);
        base.OnInitialized();
    }

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public FilterType FilterType { get; set; } = FilterType.Excel;

    [Parameter]
    public bool AllowSelection { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; } = default!;

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

    [Parameter]
    public RenderFragment EmptyElementsTemplate { get; set; } = DefaultEmptySequenceTemplate.Default;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public IEnumerable<T>? DataSource { get; set; }

    [Parameter]
    public bool AllowExport { get; set; }

    [Parameter]
    public bool AllowPaging { get; set; } = true;

    [Parameter]
    public bool AllowFiltering { get; set; } = true;

    [Parameter]
    public bool AllowSorting { get; set; } = true;

    [Parameter]
    public ushort PageSize { get; set; } = 10;

    [Parameter]
    public string Breakpoint { get; set; } = Breakpoints.SmallUp;

    [Parameter]
    public string MinimalClass { get; set; } = "dragonspark-minimal";

    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    [Parameter]
    public ICollection<string>? DesktopToolbar { get; set; }

    [Parameter]
    public ICollection<string>? MobileToolbar { get; set; } = DefaultToolbar.Default;

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = default!;

    public bool IsEmpty() => !_subject?.CurrentViewData.Any() ?? true;

    public Task Refresh() => _subject?.Refresh() ?? Task.CompletedTask;

    public Task Export() => _subject?.ExportToExcelAsync(ExportProperties.Default) ?? Task.CompletedTask;

    bool Matches
	{
		get => _state.GetValueOrDefault();
        set => _state = value;
	}

	string Class
	{
		get {
			var start = Matches ? string.Empty : MinimalClass;
			var result = $"{start} {CssClass}".Trim();
			return result;
		}
	}

	Task OnClientInitialized(string parameter) => _subject?.SetPersistDataAsync(parameter) ?? Task.CompletedTask;

    public ValueTask<string> Get() => _subject is not null ? _subject.GetPersistDataAsync().ToOperation() : ValueTask.FromResult(string.Empty);
}