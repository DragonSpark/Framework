@using BlazorPro.BlazorSize
@using DragonSpark.Application.Entities.Queries.Runtime
@using DragonSpark.Application.Entities.Queries.Runtime.Pagination
@using DragonSpark.Application.Entities.Queries.Runtime.Shape
@using DragonSpark.Application.Runtime.Operations
@using DragonSpark.Compose
@using DragonSpark.Presentation.Components
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.SyncfusionRendering.Entities
@using DragonSpark.SyncfusionRendering.Queries
@using Syncfusion.Blazor.Grids

@typeparam T

@inherits DragonSpark.Presentation.Components.Content.Templates.ManyActiveContentTemplateComponentBase<DragonSpark.SyncfusionRendering.Queries.IDataRequest>

<DragonSpark.Presentation.Components.State.ActivityReceiverContainer Context="_">
	<SyncfusionQueryContainer T="T" Content="@Content" Compose="@Compose" Reporter="@Reporter"
							  LoadingTemplate="@EmptyContentTemplate.Default"
							  EmptyElementsTemplate="@EmptyElementsTemplate"
							  NotFoundTemplate="@NotFoundTemplate"
							  ExceptionTemplate="@ExceptionTemplate"
							  HeaderTemplate="@HeaderTemplate"
							  FooterTemplate="@FooterTemplate"
							  ReportedType="@ReportedType"
							  >
		@if (BodyHeaderTemplate is not null)
		{
			@BodyHeaderTemplate
		}

			<DataQueryGrid T="T" Content="context"
					       Id="@_identity"
						   FilterType="@FilterType"
						   ReportedType="@ReportedType"
						   Columns="@Columns"
						   AllowPaging="@AllowPaging"
						   AllowFiltering="@AllowFiltering"
						   AllowSorting="@AllowSorting"
						   LoadingTemplate="@LoadingTemplate"
						   Toolbar="@Toolbar"
						   CssClass="@CssClass"
						   Breakpoint="@Breakpoint"
						   PageSize="@PageSize"
						   Created="@Created"
						   Updated="@Updated"
						   @attributes="@AdditionalAttributes">
				@if (BodyContentTemplate is not null)
				{
					@BodyContentTemplate
				}
			</DataQueryGrid>

		@if (BodyFooterTemplate is not null)
		{
			@BodyFooterTemplate
		}
	</SyncfusionQueryContainer>
</DragonSpark.Presentation.Components.State.ActivityReceiverContainer>

@code {

	[Parameter]
	public Guid Id
	{
		get => _id;
		set
		{
			if (_id != value)
			{
				_id = value;
				_identity = GenerateElementIdentifier.Default.Get(_id);
			}
		}
	}	Guid _id = Guid.Empty;

	string _identity = string.Empty;

	[Parameter]
	public IQueries<T> Content {get; set; } = default!;

	[Parameter]
	public ICompose<T> Compose { get; set; } = SyncfusionCompose<T>.Default;

	[Parameter]
	public IReporter<IDataRequest>? Reporter { get; set; } = Queries.Reporter.Default;

	[Parameter]
	public Type? ReportedType { get; set; }

	[Parameter]
	public FilterType FilterType { get; set; } = FilterType.Excel;

	[Parameter]
	public RenderFragment Columns { get; set; } = default!;

	[Parameter]
	public RenderFragment? BodyHeaderTemplate { get; set; }

	[Parameter]
	public RenderFragment? BodyContentTemplate { get; set; }

	[Parameter]
	public RenderFragment? BodyFooterTemplate { get; set; }

	[Parameter]
	public RenderFragment<IPages<T>>? HeaderTemplate { get; set; }

	[Parameter]
	public RenderFragment<IPages<T>>? FooterTemplate { get; set; }

	[Parameter]
	public bool AllowPaging { get; set; } = true;

	[Parameter]
	public bool AllowFiltering { get; set; } = true;

	[Parameter]
	public bool AllowSorting { get; set; } = true;

	[Parameter]
	public string Breakpoint { get; set; } = Breakpoints.SmallUp;

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

    [Parameter]
    public ICollection<string>? Toolbar { get; set; }

	[Parameter]
	public ushort PageSize { get; set; } = 10;

    [Parameter]
    public EventCallback<T> Created { get; set; }

    [Parameter]
    public EventCallback<Updated<T>> Updated { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AdditionalAttributes { get; set; } = default!;
}