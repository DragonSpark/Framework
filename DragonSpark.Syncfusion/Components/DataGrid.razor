@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Model.Commands
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.SyncfusionRendering.Entities
@using Syncfusion.Blazor.Grids
@using Action = Syncfusion.Blazor.Grids.Action

@typeparam T
@inherits DataComponent
@implements ISpecialColumnContainer

@if (_display)
{
    <style>
        .e-excelfilter .e-searchbox {
            display: none;
        }
    </style>
}
<CascadingValue TValue="ISpecialColumnContainer" IsFixed="true" Value="@this">
    <AdaptiveGrid T="T"
                  @ref="@_subject"
                  Id="@Id"
                  Enabled="@Enabled"
                  FilterType="@FilterType"
                  Columns="@Columns"
                  DataSource="@DataSource"
                  AllowSelection="@AllowSelection"
                  AllowPaging="@AllowPaging"
                  AllowFiltering="@AllowFiltering"
                  AllowSorting="@AllowSorting"
                  AllowExport="@AllowExport"
                  Breakpoint="@Breakpoint"
                  DesktopToolbar="@DesktopToolbar"
                  MobileToolbar="@MobileToolbar"
                  CssClass="@CssClass"
                  PageSize="@PageSize"
                  LoadingTemplate="@LoadingTemplate"
                  @attributes="@AdditionalAttributes">

        <GridTemplates EmptyRecordTemplate="@_fragment" />
        <GridEvents TValue="T" DataBound="@OnDataBound" OnActionBegin="@OnActionBegin" OnActionFailure="@OnFailure" />

        @if (ChildContent is not null)
        {
            @ChildContent
        }
    </AdaptiveGrid>
</CascadingValue>

@code {
    readonly Model.Results.Switch               _update  = new(true), _ready = new(), _display = new();
    readonly HashSet<string>                    _columns = new();
    RenderFragment<EmptyRecordTemplateContext>? _fragment;
    AdaptiveGrid<T>?                            _subject;
    EventCallback                               _empty;

    protected override void OnInitialized()
    {
        _empty    = EmptyCallback.Default.Get(this);
        _fragment = LoadingTemplate.Accept;
        base.OnInitialized();
    }

    public Task Export() => _subject?.Export() ?? Task.CompletedTask;

    [Parameter]
    public string Id
    {
        get => _id;
        set
        {
            if (_id != value)
            {
                _id = value;
                _update.Up();
            }
        }
    }   string _id = string.Empty;

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public FilterType FilterType { get; set; } = FilterType.Excel;

    [Parameter]
    public bool AllowExport { get; set; }

    [Parameter]
    public bool AllowSelection { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; } = default!;

    [Parameter]
    public IEnumerable<T>? DataSource { get; set; }

    [Parameter]
    public string Breakpoint { get; set; } = Breakpoints.SmallUp;

    [Parameter]
    public RenderFragment EmptyElementsTemplate { get; set; } = DefaultEmptyResultTemplate.Default;

    [Parameter]
    public RenderFragment ProblemTemplate { get; set; } = DefaultExceptionTemplate.Default;

    [Parameter]
    public ICollection<string>? DesktopToolbar { get; set; }

    [Parameter]
    public ICollection<string>? MobileToolbar { get; set; } = DefaultToolbar.Default;

    [Parameter]
    public EventCallback<Updated<T>> Updated { get; set; }

    [Parameter]
    public EventCallback<Allow<T>> Editing { get; set; }

    [Parameter]
    public EventCallback<T> Created { get; set; }

    [Parameter]
    public EventCallback<Exception> Error { get; set; }

    [Parameter]
    public EventCallback Ready { get; set; }

    [Parameter]
    public EventCallback Empty { get; set; }

    public Task Refresh() => _subject?.Refresh() ?? Task.CompletedTask;

    Task OnDataBound(object parameter)
    {
        _fragment = EmptyElementsTemplate.Accept;
        var subject  = _subject.Verify();
        var callback = subject.IsEmpty() ? Empty : _ready.Up() ? Ready : _empty;
        return callback.Invoke();
    }

    async Task OnActionBegin(ActionEventArgs<T> parameter)
    {
        switch (parameter.RequestType)
        {
            case Action.FilterBeforeOpen:
                _display.Execute(_columns.Contains(parameter.ColumnName));
                break;
            case Action.BeginEdit:
                var allow = new Allow<T>(parameter.Data);
                await Editing.Invoke(allow).Await();
                parameter.Cancel = !allow.Get();
                break;
            case Action.Add:
                await Created.Invoke(parameter.Data).Await();
                break;
            case Action.Save:
            case Action.Delete:
                await Updated.Invoke(new(parameter.Data, parameter.Action)).Await();
                break;
        }
    }

    async Task OnFailure(FailureEventArgs parameter)
    {
        _fragment = ProblemTemplate.Accept;
        await Exceptions.Get(new(ReportedType ?? GetType(), parameter.Error));
        await Error.Invoke(parameter.Error).Await();
    }

    void ICommand<string>.Execute(string parameter)
    {
        _columns.Add(parameter);
    }
}