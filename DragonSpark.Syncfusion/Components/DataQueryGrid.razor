@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using DragonSpark.SyncfusionRendering.Entities
@using DragonSpark.SyncfusionRendering.Queries
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids

@typeparam T
@inherits DataQueryComponent

@inject ProtectedSessionStorage Session

<DataGrid T="T"
          @ref="@_subject"
          Id="@Id"
          Enabled="@_active"
          FilterType="@FilterType"
          Columns="@Columns"
          AllowSelection="@AllowSelection"
          AllowPaging="@AllowPaging"
          AllowFiltering="@AllowFiltering"
          AllowSorting="@AllowSorting"
          AllowExport="@AllowExport"
          Breakpoint="@Breakpoint"
          DesktopToolbar="@DesktopToolbar"
          MobileToolbar="@MobileToolbar"
          CssClass="@CssClass"
          PageSize="@PageSize"
          LoadingTemplate="@LoadingTemplate"
          EmptyElementsTemplate="@EmptyElementsTemplate"
          Updated="@Updated"
          Editing="@Editing"
          Created="@Created"
          Ready="@Ready"
          Empty="@Empty"
          @attributes="@AdditionalAttributes">
    <ChildContent>
        <Syncfusion.Blazor.Data.SfDataManager Adaptor="Adaptors.CustomAdaptor">
            <DataRequestCallbackAdaptor Requested="@OnRequest"/>
        </Syncfusion.Blazor.Data.SfDataManager>
        @if (ChildContent is not null)
        {
            @ChildContent
        }
    </ChildContent>
</DataGrid>

@code {
    readonly Model.Results.Switch _active = true, _update = true;

    GridStateVariable _store = null!;
    DataGrid<T>? _subject;

    public Task Export() => _subject?.Export() ?? Task.CompletedTask;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public FilterType FilterType { get; set; } = FilterType.Excel;

    [Parameter]
    public bool AllowExport { get; set; }

    [Parameter]
    public bool AllowSelection { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; } = null!;

    [Parameter]
    public string Breakpoint { get; set; } = Breakpoints.SmallUp;

    [Parameter]
    public RenderFragment EmptyElementsTemplate { get; set; } = DefaultEmptyResultTemplate.Default;

    [Parameter]
    public ICollection<string>? DesktopToolbar { get; set; }

    [Parameter]
    public ICollection<string>? MobileToolbar { get; set; } = DefaultToolbar.Default;

    [Parameter]
    public EventCallback<Updated<T>> Updated { get; set; }

    [Parameter]
    public EventCallback<Allow<T>> Editing { get; set; }

    [Parameter]
    public EventCallback<T> Created { get; set; }

    [Parameter]
    public EventCallback Ready { get; set; }

    [Parameter]
    public EventCallback Empty { get; set; }

    public Task Refresh() => _subject?.Refresh() ?? Task.CompletedTask;

    protected override Await<DataManagerRequest, object> CreateInput()
        => new StateAwareDataRequest(Content, _store, _active).Then().Then().Handle(EmptyDataResult.Default.Get());

    protected override void OnParametersSet()
    {
        if (_update.Down())
        {
            _store = new(Id, Session);
        }
        base.OnParametersSet();
    }
}
