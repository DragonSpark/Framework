@typeparam T
@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Components.State
@using DragonSpark.Syncfusion.Queries
@using global::Syncfusion.Blazor
@inherits DragonSpark.Presentation.Components.ComponentBase

<AdaptiveGrid T="T"
	@ref="@_subject"
	FilterType="@FilterType"
	Columns="@Columns"
	AllowPaging="@AllowPaging"
	AllowFiltering="@AllowFiltering"
	AllowSorting="@AllowSorting"
	Breakpoint="@Breakpoint"
	CssClass="@CssClass"
	PageSize="@PageSize"
	LoadingTemplate="@LoadingTemplate"
	@attributes="@AdditionalAttributes">
	<GridTemplates LoadingTemplate="@LoadingTemplate" />
	<SfDataManager @ref="@_hack">
		<DataRequestCallbackAdaptor Requested="@OnRequest" />
	</SfDataManager>
	@if (ChildContent is not null)
	{
		@ChildContent
	}
</AdaptiveGrid>

@code {
	SfDataManager _hack = default!;
	AdaptiveGrid<T> _subject = default!;

	[Parameter]
	public IDataRequest Content
	{
		get => _content;
		set
		{
			if (_content != value)
			{
				_content = value;
				RefreshRequested = Input != null;
				Input = null;
			}
		}
	}	IDataRequest _content = default!;

	[Parameter]
	public Type? ReportedType { get; set; }

	[Parameter]
	public FilterType FilterType { get; set; } = FilterType.Excel;

	[Parameter]
	public RenderFragment Columns { get; set; } = default!;

	[Parameter]
	public RenderFragment LoadingTemplate { get; set; } = DefaultLoadingTemplate.Default;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public bool AllowPaging { get; set; } = true;

	[Parameter]
	public bool AllowFiltering { get; set; } = true;

	[Parameter]
	public bool AllowSorting { get; set; } = true;

	[Parameter]
	public string Breakpoint { get; set; } = Breakpoints.SmallUp;

	[Parameter]
	public string CssClass { get; set; } = string.Empty;

	[Parameter]
	public ushort PageSize { get; set; } = 10;

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AdditionalAttributes { get; set; } = default!;

	[CascadingParameter]
	IActivityReceiver Receiver { get; set; } = default!;

	public Task Refresh() => _subject.Refresh();

	Await<DataManagerRequest, object>? Input { get; set; }

	bool RefreshRequested { get; set; }

	protected override void OnParametersSet()
	{
		Input ??= _content.Then()
		                  .Then()
		                  .UpdateActivity(Receiver)
		                  .Handle(Exceptions, ReportedType ?? GetType(), EmptyDataResult.Default);
		base.OnParametersSet();
	}

	protected override Task OnParametersSetAsync()
	{
		if (RefreshRequested)
		{
			RefreshRequested = false;
			return _subject.RefreshDataState(_hack);
		}
		return base.OnParametersSetAsync();
	}

	async Task OnRequest(DataRequestResult parameter)
	{
		var data = await Input!(parameter.Request);
		parameter.Execute(data);
	}

}
