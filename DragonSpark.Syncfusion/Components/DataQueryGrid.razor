@using BlazorPro.BlazorSize
@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components.Content.Templates
@using DragonSpark.Presentation.Components.State
@using DragonSpark.Syncfusion.Queries
@using global::Syncfusion.Blazor

@typeparam T
@inherits DataQueryComponent

<AdaptiveGrid T="T"
	@ref="@_subject"
	FilterType="@FilterType"
	Columns="@Columns"
	AllowPaging="@AllowPaging"
	AllowFiltering="@AllowFiltering"
	AllowSorting="@AllowSorting"
	Breakpoint="@Breakpoint"
	CssClass="@CssClass"
	PageSize="@PageSize"
	LoadingTemplate="@LoadingTemplate"
	@attributes="@AdditionalAttributes">
	<GridTemplates LoadingTemplate="@LoadingTemplate" />
	<SfDataManager>
		<DataRequestCallbackAdaptor Requested="@OnRequest" />
	</SfDataManager>
	@if (ChildContent is not null)
	{
		@ChildContent
	}
</AdaptiveGrid>

@code {
	AdaptiveGrid<T> _subject = default!;

	[Parameter]
	public override IDataRequest Content
	{
		set
		{
			RefreshRequested = Input != null;
			base.Content = value;
		}
	}	

	[Parameter]
	public FilterType FilterType { get; set; } = FilterType.Excel;

	[Parameter]
	public RenderFragment Columns { get; set; } = default!;

	[Parameter]
	public string Breakpoint { get; set; } = Breakpoints.SmallUp;

	public Task Refresh() => _subject.Refresh();

	Await<DataManagerRequest, object>? Input { get; set; }

	bool RefreshRequested { get; set; }

	protected override Task OnParametersSetAsync()
	{
		if (RefreshRequested)
		{
			RefreshRequested = false;
			return _subject.Refresh();
		}
		return base.OnParametersSetAsync();
	}
}
