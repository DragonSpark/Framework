@using DragonSpark.Application.Model.Sequences
@using DragonSpark.Compose
@using DragonSpark.Model
@using NetFabric.Hyperlinq
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.Buffers
@using System.Collections.ObjectModel

@typeparam TValue
@typeparam TItem where TItem : class

<SfListBox @ref="_subject" TValue="TValue[]" TItem="TItem" CssClass="@CssClass"
    AllowDragAndDrop="AllowDragDrop" Scope="@Scope" DataSource="@Items" MaximumSelectionLength="1"
    Value="@CurrentValue"
>
    <ListBoxFieldSettings Value="@IdNameField" Text="@DisplayNameField" />
    <ListBoxSelectionSettings Mode="SelectionMode.Single" />
    <ListBoxEvents TValue="TValue[]" TItem="TItem" ValueChange="@OnSelect" OnActionComplete="@OnActionComplete" />
    @if (ChildContent is not null)
    {
        @ChildContent
    }
</SfListBox>

@code {
    SfListBox<TValue[], TItem> _subject = default!;

    [Parameter]
    public bool AllowDragDrop { get; set; }

    [Parameter]
    public string Scope { get; set; } = default!;

    [Parameter]
    public string CssClass { get; set; } = default!;

    [Parameter]
    public string IdNameField { get; set; } = "Id";

    [Parameter]
    public string DisplayNameField { get; set; } = "Name";

    [Parameter]
    public ObservedList<TItem> Items { get; set; } = default!;

    [Parameter]
    public TItem Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                CurrentValue = _value.Account() is not null && SelectValue is not null ? SelectValue.Verify()(_value).Yield().ToArray() : Empty.Array<TValue>();
            }
        }
    }	TItem _value = default!;

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public EventCallback Updated { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Func<TItem, TValue>? SelectValue { get; set; }

    TValue[] CurrentValue { get; set; } = Empty.Array<TValue>();

    Func<Task> _update = default!;

    protected override void OnInitialized()
    {
        _update = Update;
        base.OnInitialized();
    }

    Task OnSelect(ListBoxChangeEventArgs<TValue[], TItem> parameter)
        => ValueChanged.InvokeAsync(Value = _subject.GetDataByValue(parameter.Value).Single());

    Task Update() => Updated.InvokeAsync(this);

    void OnActionComplete(ActionCompleteEventArgs<TItem> parameter)
    {
        switch (parameter.EventName)
        {
            case "MoveDown":
            case "MoveTo":
            case "MoveUp":
                {
                    using var source = _subject.GetDataList().AsValueEnumerable().ToArray(ArrayPool<TItem>.Shared);
                    using var items = parameter.Result.AsValueEnumerable().ToArray(ArrayPool<TItem>.Shared);
                    var       span = items.Memory.Span;
                    for (ushort i = 0; i < items.Length; i++)
                    {
                        var current = span[i];
                        var from = Items.IndexOf(current);
                        var to = source.IndexOf(current);
                        Items.Move(from, to);
                    }
                    InvokeAsync(_update);
                }
                break;
        }
    }
}