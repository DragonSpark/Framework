@using DragonSpark.Compose
@using DragonSpark.Model
@using Syncfusion.Blazor.DropDowns

@typeparam TValue
@typeparam TItem where TItem : class

<ListBox @ref="_subject" TValue="TValue[]" TItem="TItem" CssClass="@CssClass"
    AllowDragAndDrop="AllowDragDrop" Scope="@Scope" DataSource="@Items" MaximumSelectionLength="1"
    Value="@CurrentValue"
>
    <ListBoxFieldSettings Value="@IdNameField" Text="@DisplayNameField" />
    <ListBoxSelectionSettings Mode="SelectionMode.Single" />
    <ListBoxEvents TValue="TValue[]" TItem="TItem" ValueChange="@OnSelect" />
    @if (ChildContent is not null)
    {
        @ChildContent
    }
</ListBox>

@code {
    ListBox<TValue[], TItem> _subject = default!;

    [Parameter]
    public bool AllowDragDrop { get; set; }

    [Parameter]
    public string Scope { get; set; } = default!;

    [Parameter]
    public string CssClass { get; set; } = default!;

    [Parameter]
    public string IdNameField { get; set; } = "Id";

    [Parameter]
    public string DisplayNameField { get; set; } = "Name";

    [Parameter]
    public ICollection<TItem> Items
    {
        get => _items;
        set
        {
            if (!ReferenceEquals(_items, value))
            {
                _items = value;
                Count = (ushort)_items.Count;
            }
        }
    }	ICollection<TItem> _items = default!;

    [Parameter]
    public TItem Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                CurrentValue = SelectValue is not null ? SelectValue.Verify()(_value).Yield().ToArray() : Empty.Array<TValue>();
            }
        }
    }	TItem _value = default!;

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Func<TItem, TValue>? SelectValue { get; set; }

    TValue[] CurrentValue { get; set; } = Empty.Array<TValue>();
    ushort Count { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_items.Count != Count)
        {
            Count = (ushort)_items.Count;
            await _subject.Refresh();
        }
    }

    Task OnSelect(ListBoxChangeEventArgs<TValue[], TItem> parameter)
        => ValueChanged.InvokeAsync(Value = _subject.GetDataByValue(parameter.Value).Single());
}