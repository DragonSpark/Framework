@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using DragonSpark.Presentation.Components.Content.Sequences
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using DragonSpark.SyncfusionRendering.Queries
@using Syncfusion.Blazor
@using FilterType = Syncfusion.Blazor.DropDowns.FilterType

@inherits DataQueryComponent

@typeparam TItem
@typeparam TValue

<SfComboBox TItem="TItem" TValue="TValue" @ref="_subject" Value="@Value" Placeholder="@Placeholder" AllowFiltering="@AllowFiltering"
            CssClass="@CssClass" ShowClearButton="true" FilterType="FilterType.Contains" EnableVirtualization="@Virtualization.HasValue" Query="@_display">
    <ComboBoxTemplates TItem="TItem" HeaderTemplate="@HeaderTemplate" ItemTemplate="@ItemTemplate"/>
    <SfDataManager Adaptor="Adaptors.CustomAdaptor">
        <DataRequestCallbackAdaptor Requested="@OnRequest"/>
    </SfDataManager>
    @if (ChildContent is not null)
    {
        @ChildContent
    }
</SfComboBox>

@code {
    SfComboBox<TValue, TItem> _subject = null!;

    [Parameter]
    public TValue? Value { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = null!;

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; } = null!;

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = null!;

    [Parameter]
    public EventCallback<DataRequestResult> Requested { get; set; }

    [Parameter]
    public byte? Virtualization
    {
        get;
        set
        {
            if (field != value)
            {
                field    = value;
                _display = field.HasValue ? new Query().Take(field.Value) : null;
            }
        }
    } = DefaultPageSize.Default;

    Query? _display = new Query().Take(DefaultPageSize.Default);

    [Parameter]
    public IRequests Requests { get; set; } = Components.Requests.Default;

    protected override async Task OnRequest(DataRequestResult parameter)
    {
        parameter.Request.RequiresCounts = true;
        await base.OnRequest(parameter);
        await Requested.Invoke(parameter).Off();
    }

    protected override Await<Stop<DataManagerRequest>, object> CreateInput()
        => Requests.Get(Content)
                   .Then()
                   .Then()
                   .Handle(EmptyDataResult.Default);

    public Task Display() => _subject.ShowPopupAsync();
    public Task Blur() => _subject.FocusOutAsync();
}