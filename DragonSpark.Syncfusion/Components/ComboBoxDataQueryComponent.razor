@using DragonSpark.Compose
@using DragonSpark.Model.Operations
@using DragonSpark.Presentation
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data

@using DragonSpark.SyncfusionRendering.Queries
@using Syncfusion.Blazor
@using FilterType = Syncfusion.Blazor.DropDowns.FilterType

@inherits DataQueryComponent

@typeparam TItem
@typeparam TValue

<SfComboBox TItem="TItem" TValue="TValue" Value="@Value" Placeholder="@Placeholder" AllowFiltering="@AllowFiltering" 
    CssClass="@CssClass"
    FilterType="FilterType.Contains" >
    <ComboBoxTemplates TItem="TItem" HeaderTemplate="@HeaderTemplate" ItemTemplate="@ItemTemplate"  />
    <SfDataManager Adaptor="Adaptors.CustomAdaptor">
        <DataRequestCallbackAdaptor Requested="@OnRequest" />
    </SfDataManager>
    @if (ChildContent is not null)
    {
        @ChildContent
    }
</SfComboBox>

@code {
    [Parameter]
    public TValue? Value { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = default!;

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = default!;

    protected override Await<DataManagerRequest, object> CreateInput()
        => Content.Then()
                  .Then()
                  .Handle(Exceptions, ReportedType ?? GetType(), EmptyDataResult.Default);

}
