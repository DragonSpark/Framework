@using DragonSpark.Compose
@using DragonSpark.Presentation.Components.Content.Rendering
@using DragonSpark.SyncfusionRendering.Queries
@using Microsoft.Extensions.Caching.Memory
@using Radzen

@inject IMemoryCache Memory
@inject IContentKey Key

@ChildContent(_context)

@code {
    Func<string> _key = null!;
    IDataRequest _context = null!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public required IDataRequest Input { get; set; }

    [Parameter]
    public RenderFragment<IDataRequest> ChildContent { get; set; } = null!;

    protected override void OnInitialized()
    {
        _key = DetermineKey;
        base.OnInitialized();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var changed = parameters.DidParameterChange(nameof(Input), Input);
        await base.SetParametersAsync(parameters).Off();
        if (changed)
        {
            _context = new MemoryAwareDataRequest(Input, Memory, _key);
        }
    }

    string DetermineKey() => $"{Id}_{Key.Get(this)}";
}