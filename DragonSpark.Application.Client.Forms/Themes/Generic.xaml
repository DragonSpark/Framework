<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
	mc:Ignorable="d"
	xmlns:forms="clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core"
	xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
	xmlns:rendering="clr-namespace:DragonSpark.Application.Client.Forms.Rendering">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="ThemeResources.xaml" />
		<ResourceDictionary Source="Controls.xaml" />
	</ResourceDictionary.MergedDictionaries>
	
	<rendering:CaseConverter x:Key="UpperConverter" ConvertToUpper="True" />
	<rendering:CaseConverter x:Key="LowerConverter" ConvertToUpper="False" />
	<rendering:ColorConverter x:Key="ColorConverter" />
	<rendering:HeightConverter x:Key="HeightConverter" />
	<rendering:XAlignConverter x:Key="XAlignConverter" />
	<rendering:KeyboardConverter x:Key="KeyboardConverter"/>
	<rendering:ImageConverter x:Key="ImageConverter" />
	<rendering:ViewToRendererConverter x:Key="ViewToRenderer" />
	<!--<rendering:PageToRendererConverter x:Key="PageToRenderer" />-->
	<rendering:CollapseWhenEmptyConverter x:Key="CollapseWhenEmpty" />
	<rendering:EntryCellRendererCompleted x:Key="EntryCellRendererCompleted" />

	<Style x:Key="PhoneTextSmallTitleStyle" BasedOn="{StaticResource PhoneTextNormalStyle}" TargetType="TextBlock">
		<Style.Setters>
			<Setter Property="FontWeight" Value="Bold" />
		</Style.Setters>
	</Style>

	<DataTemplate x:Key="CellTemplate">
		<rendering:CellControl Cell="{Binding}" HorizontalContentAlignment="Stretch" />
	</DataTemplate>

	<DataTemplate x:Key="TableGroup" DataType="TableRowGroup">
		<StackPanel Margin="0,20,0,0">
			<TextBlock Text="{Binding Title, Converter={StaticResource LowerConverter}}" Style="{StaticResource PhoneTextGroupHeaderStyle}" />
			<ItemsControl ItemsSource="{Binding}" ItemTemplate="{StaticResource CellTemplate}" />
		</StackPanel>
	</DataTemplate>

	<DataTemplate x:Key="ViewCell" DataType="{x:Type forms:ViewCell}">
		<ContentPresenter Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}"  Content="{Binding View, Converter={StaticResource ViewToRenderer}}" />
	</DataTemplate>

	<DataTemplate x:Key="View">
		<ContentPresenter Content="{Binding Path=.,Converter={StaticResource ViewToRenderer}}" />
	</DataTemplate>

	<!--<Style x:Key="HeaderJumpStyle" TargetType="phone:LongListSelector">
		<Setter Property="GridCellSize" Value="113,113" />
		<Setter Property="LayoutMode" Value="Grid" />
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border Background="{StaticResource PhoneAccentBrush}" Margin="6">
						<TextBlock Text="{Binding ShortName, Converter={StaticResource LowerConverter}}" Foreground="{StaticResource PhoneForegroundBrush}" FontSize="48" Padding="6" FontFamily="{StaticResource PhoneFontFamilySemiLight}" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

	<DataTemplate x:Key="ListViewHeader">
		<rendering:CellControl Cell="{Binding HeaderContent}" HorizontalContentAlignment="Left" ShowContextActions="False" />
	</DataTemplate>

	<DataTemplate x:Key="ListViewHeaderTextCell">
		<Border Background="{StaticResource PhoneAccentBrush}" Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}" Margin="5" MinWidth="62" MinHeight="62">
			<StackPanel Margin="6">
				<StackPanel.Resources>
					<Style TargetType="TextBlock">
						<Setter Property="FontFamily" Value="{StaticResource PhoneFontFamilySemiLight}" />
					</Style>
				</StackPanel.Resources>

				<TextBlock FontSize="48"
						   Text="{Binding Text, Converter={StaticResource LowerConverter}}"
						   Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
						   Foreground="{Binding TextColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneForegroundBrush}" />

				<TextBlock FontSize="32"
						   Text="{Binding Detail}"
						   Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
						   Foreground="{Binding DetailColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneAccentBrush}" />
			</StackPanel>
		</Border>
	</DataTemplate>

	<DataTemplate x:Key="TextCell">
		<Button Name="button" Margin="0,10,0,0" Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}"  IsEnabled="{Binding IsEnabled}">
			<Button.Template>
				<ControlTemplate>
					<Grid Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}">
						<ContentPresenter />
					</Grid>
				</ControlTemplate>
			</Button.Template>
			<Button.Content>
				<StackPanel>
					<TextBlock
						Style="{StaticResource PhoneTextExtraLargeStyle}"
						Text="{Binding Text,Converter={StaticResource LowerConverter}}"
						Foreground="{Binding TextColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneForegroundBrush}"
						Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
					/>

					<TextBlock
						Style="{StaticResource PhoneTextAccentStyle}"
						Text="{Binding Detail}"
						Foreground="{Binding DetailColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneAccentBrush}"
						Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
					/>
				</StackPanel>
			</Button.Content>
		</Button>
	</DataTemplate>

	<DataTemplate x:Key="ImageCell">
		<Button Name="button" Margin="0,10,0,0" Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}"  IsEnabled="{Binding IsEnabled}">
			<Button.Template>
				<ControlTemplate>
					<Grid Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}">
						<ContentPresenter />
					</Grid>
				</ControlTemplate>
			</Button.Template>
			<Button.Content>
				<Grid Margin="10, 0, 0, 0">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="80"/>
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Image 
						Grid.Column="0"
						DataContext="{Binding ImageSource, Converter={StaticResource ImageConverter}}"
						Source="{Binding Value}" 
						VerticalAlignment="Center"
					/>

					<StackPanel Grid.Column="1">
						<TextBlock
							Style="{StaticResource PhoneTextExtraLargeStyle}"
							Text="{Binding Text,Converter={StaticResource LowerConverter}}"
							Foreground="{Binding TextColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneForegroundBrush}"
							Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
						/>

						<TextBlock
							Style="{StaticResource PhoneTextAccentStyle}"
							Text="{Binding Detail}"
							Foreground="{Binding DetailColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneAccentBrush}"
							Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
						/>
					</StackPanel>
				</Grid>
			</Button.Content>
		</Button>
	</DataTemplate>

	<DataTemplate x:Key="ListImageCell">
		<Button Margin="0,10,0,0" Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}" IsEnabled="{Binding IsEnabled}">
			<Button.Template>
				<ControlTemplate>
					<Grid Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}">
						<ContentPresenter />
					</Grid>
				</ControlTemplate>
			</Button.Template>
			<Button.Content>
				<Grid Margin="10, 0, 0, 0">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="80"/>
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Image 
						Grid.Column="0"
						DataContext="{Binding ImageSource, Converter={StaticResource ImageConverter}}"
						Source="{Binding Value}"
						VerticalAlignment="Center"
					/>

					<StackPanel Grid.Column="1">
						<TextBlock
							Style="{StaticResource PhoneTextLargeStyle}"
							Text="{Binding Text}"
							Foreground="{Binding TextColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneForegroundBrush}"
							Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
							rendering:ListViewRenderer.HighlightWhenSelected="True"
						/>

						<TextBlock
							Style="{StaticResource PhoneTextAccentStyle}"
							Text="{Binding Detail}"
							Foreground="{Binding DetailColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneAccentBrush}"
							Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
							rendering:ListViewRenderer.HighlightWhenSelected="True"
						/>
					</StackPanel>
				</Grid>
			</Button.Content>
		</Button>
	</DataTemplate>

	<DataTemplate x:Key="ListViewTextCell">
		<Button Margin="0,10,0,0" Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}" IsEnabled="{Binding IsEnabled}">
			<Button.Template>
				<ControlTemplate>
					<Grid Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}">
						<ContentPresenter />
					</Grid>
				</ControlTemplate>
			</Button.Template>
			<Button.Content>
				<StackPanel>
					<TextBlock
						Style="{StaticResource PhoneTextLargeStyle}"
						Text="{Binding Text}"
						Foreground="{Binding TextColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneForegroundBrush}"
						Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
						rendering:ListViewRenderer.HighlightWhenSelected="True"
					/>

					<TextBlock
						Style="{StaticResource PhoneTextAccentStyle}"
						Text="{Binding Detail}"
						Foreground="{Binding DetailColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneAccentBrush}"
						Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
						rendering:ListViewRenderer.HighlightWhenSelected="True"
					/>
				</StackPanel>
			</Button.Content>
		</Button>
	</DataTemplate>

	<DataTemplate x:Key="EntryCell">
		<Grid HorizontalAlignment="Stretch" d:DataContext="{d:DesignInstance forms:EntryCell}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="*"/>
			</Grid.ColumnDefinitions>

			<Grid.Children>
				<TextBlock rendering:ListViewRenderer.HighlightWhenSelected="True" Style="{StaticResource PhoneTextLargeStyle}"
							Text="{Binding Label}"
							Foreground="{Binding LabelColor,Converter={StaticResource ColorConverter},ConverterParameter=PhoneForegroundBrush}"
							Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
							VerticalAlignment="Center"
							Grid.Column="0"
				/>
				<rendering:EntryCellPhoneTextBox
							IsEnabled="{Binding IsEnabled}"
							ToolTip="{Binding Placeholder}"
							Text="{Binding Text, Mode=TwoWay}"
							InputScope="{Binding Keyboard, Converter={StaticResource KeyboardConverter}}"
							VerticalAlignment="Center"
							TextAlignment="{Binding XAlign, Converter={StaticResource XAlignConverter}}"
							Grid.Column="1"
				>
					<i:Interaction.Triggers>
						<i:EventTrigger EventName="KeyboardReturnPressed">
							<i:InvokeCommandAction Command="{StaticResource EntryCellRendererCompleted}" CommandParameter="{Binding}" />
						</i:EventTrigger>
					</i:Interaction.Triggers>
				</rendering:EntryCellPhoneTextBox>
			</Grid.Children>
		</Grid>
	</DataTemplate>

	<DataTemplate x:Key="SwitchCell">
		<ToggleButton Content="{Binding Text}" Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}" 
								  IsChecked="{Binding On, Mode=TwoWay}" IsEnabled="{Binding IsEnabled}" FontFamily="{StaticResource PhoneFontFamilyNormal}" />
	</DataTemplate>

	<!--<DataTemplate x:Key="TabbedPage">
		<rendering:TabbedPagePresenter Content="{Binding Converter={x:Static rendering:RenderingConverter.Instance}}" />
	</DataTemplate>-->

	<DataTemplate x:Key="TabbedPageHeader">
		<TextBlock Text="{Binding Title, Converter={StaticResource LowerConverter}}" />
	</DataTemplate>

	<DataTemplate x:Key="CarouselPage">
		<rendering:CarouselPagePresenter Content="{Binding Converter={x:Static rendering:RenderingConverter.Instance}}" />
	</DataTemplate>

	<DataTemplate x:Key="PickerItemTemplate">
		<StackPanel MinWidth="1000">
			<TextBlock Text="{Binding Data}" Opacity="{Binding Opacity}"/>
		</StackPanel>
	</DataTemplate>

	<DataTemplate x:Key="PickerFullItemTemplate">
		<StackPanel MaxHeight="{Binding MaxHeight}">
			<TextBlock Text="{Binding Data}" FontSize="43" />
		</StackPanel>
	</DataTemplate>

	<Style TargetType="rendering:TabbedPageRenderer">
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding Title, Converter={StaticResource LowerConverter}}" d:DataContext="{d:DesignInstance d:Type=forms:TabbedPage}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--<Style x:Key="LinkButton" 
	   TargetType="Button"
	   BasedOn="{StaticResource ResourceKey={x:Type Button}}"
	   >

		<Setter Property="Width" Value="Auto"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<ContentPresenter Content="{TemplateBinding Content}" 
								  ContentTemplate="{TemplateBinding  ContentTemplate}"
								  VerticalAlignment="Center"
								  >
						<ContentPresenter.Resources>
							<Style TargetType="{x:Type TextBlock}">
								<Setter Property="TextDecorations" Value="Underline" />
							</Style>
						</ContentPresenter.Resources>
					</ContentPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Cursor" Value="Hand" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground" Value="Red" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<presentation:CountConverter x:Key="OneCountConverter" Count="1" Inverse="True">
		<presentation:BooleanToVisibilityTranslator />
	</presentation:CountConverter>

	<presentation:BooleanConverter x:Key="BooleanToVisibilityConverter">
		<presentation:BooleanToVisibilityTranslator />
	</presentation:BooleanConverter>

	<presentation:NullToBooleanConverter x:Key="NullToBoleanVisibilityConverter">
		<presentation:BooleanToVisibilityTranslator />
	</presentation:NullToBooleanConverter>

	<DataTemplate DataType="{x:Type commanding:CommandMonitor}">
		<Grid>
			<VisualStateManager.CustomVisualStateManager>
				<ei:ExtendedVisualStateManager/>
			</VisualStateManager.CustomVisualStateManager>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="DefaultGroup">
					<VisualState x:Name="Default"/>
					<VisualState x:Name="Completed">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CloseOnCompletion">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Collapsed</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Cancel">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Collapsed</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Close">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<DockPanel Background="White">
				<StackPanel Margin="10">
					<TextBlock Text="{Binding Title}" Foreground="Black" FontWeight="Bold" Margin="0 0 0 4" />
					<ItemsControl ItemsSource="{Binding Items}" />

					<ProgressBar Height="22" Margin="0 4" Value="{Binding PercentageComplete, Mode=OneWay}" Minimum="0" Maximum="1" Visibility="{Binding Items, Converter={StaticResource OneCountConverter}}" IsTabStop="False" />

					<DockPanel Margin="4 0">
						<TextBlock Text="Status: " />
						<TextBlock Text="{Binding Status, Converter={x:Static presentation:ComponentDescriptionConverter.Instance}}" />
					</DockPanel>

					<DockPanel Margin="0 4" Visibility="{Binding AllowClose, Converter={StaticResource BooleanToVisibilityConverter}}">
						<CheckBox x:Name="CloseOnCompletion" Content="Close when Finished" VerticalAlignment="Center" Margin="0 0 5 0" IsChecked="{Binding Options.CloseOnCompletion, Mode=TwoWay}" />
						<Grid VerticalAlignment="Center">
							<Button x:Name="Cancel" Command="{Binding Cancel}" Content="Cancel" Visibility="{Binding Visibility, ElementName=CloseOnCompletion}" />
							<Button x:Name="Close" Command="{Binding Close}" Content="Close" Visibility="Collapsed" />
						</Grid>
					</DockPanel>
				</StackPanel>
			</DockPanel>

			<i:Interaction.Behaviors>
				<si:DataStateSwitchBehavior Binding="{presentation:Bind {Binding Status}}">
					<si:DataStateSwitchCase Value="None" State="Default" />
					<si:DataStateSwitchCase Value="Executing" State="Default" />
					<si:DataStateSwitchCase Value="Canceled" State="Completed" />
					<si:DataStateSwitchCase Value="Completed" State="Completed" />
					<si:DataStateSwitchCase Value="CompletedWithException" State="Completed"  />
				</si:DataStateSwitchBehavior>
			</i:Interaction.Behaviors>
		</Grid>
	</DataTemplate>

	<DataTemplate DataType="{x:Type commanding:CommandModel}">
		<Border CornerRadius="1.5,1.5,1.5,1.5" Margin="1,1,1,1" BorderBrush="Silver" BorderThickness="1" Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
			<VisualStateManager.CustomVisualStateManager>
				<ei:ExtendedVisualStateManager />
			</VisualStateManager.CustomVisualStateManager>
			<DockPanel>
				<Image Margin="8" VerticalAlignment="Top" ToolTipService.ToolTip="{Binding Status, Converter={x:Static presentation:ComponentDescriptionConverter.Instance}}" Source="{Binding Status, Converter={x:Static presentation:StringFormatConverter.Instance}, ConverterParameter='{}/DragonSpark.Application.Client;component/Themes/Images/Operations/{0}.png'}" Stretch="None" />

				<Button x:Name="DisplayExceptionDetails" Style="{StaticResource LinkButton}" Foreground="DodgerBlue" Command="{markup:Locate {x:Type commanding:ExceptionHandlingCommand}}" CommandParameter="{Binding Exception}" Content="Details" Opacity="0" IsHitTestVisible="False" Margin="8" VerticalAlignment="Top" DockPanel.Dock="Right" />

				<TextBlock VerticalAlignment="Top" Text="{Binding Title}" Foreground="Black" TextWrapping="Wrap" Margin="0 8" />
				<ContentControl Content="{Binding Content}" Margin="8" />
			</DockPanel>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="DefaultGroup">
					<VisualState x:Name="DefaultState" />
					<VisualState x:Name="Exception">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="DisplayExceptionDetails" Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0" />
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="DisplayExceptionDetails" Storyboard.TargetProperty="IsHitTestVisible">
								<DiscreteObjectKeyFrame KeyTime="00:00:00.00">
									<DiscreteObjectKeyFrame.Value>
										<system:Boolean>True</system:Boolean>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<i:Interaction.Behaviors>
				<si:DataStateSwitchBehavior Binding="{Binding Status}">
					<si:DataStateSwitchCase Value="None" State="DefaultState" />
					<si:DataStateSwitchCase Value="Executing" State="DefaultState" />
					<si:DataStateSwitchCase Value="CompletedWithException" State="Exception" />
				</si:DataStateSwitchBehavior>
			</i:Interaction.Behaviors>
		</Border>
	</DataTemplate>-->
</ResourceDictionary>
