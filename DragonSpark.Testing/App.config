<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" />
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging" />
  </configSections>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.505.0" newVersion="2.1.505.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>
  <!-- BEGIN ENTERPRISE LIBRARY CONFIGURATION: -->
  <loggingConfiguration tracingEnabled="true" defaultCategory="Debug" logWarningsWhenNoCategoriesMatch="true">
    <categorySources>
      <add name="Debug" switchValue="Verbose">
        <listeners>
          <add name="DebugLoggingListener" />
        </listeners>
      </add>
      <add name="Information" switchValue="Information">
        <listeners>
          <add name="InformationLoggingListener" />
        </listeners>
      </add>
      <add name="Warning" switchValue="Warning">
        <listeners>
          <add name="WarningLoggingListener" />
        </listeners>
      </add>
      <add name="Error" switchValue="Error">
        <listeners>
          <add name="ErrorLoggingListener" />
        </listeners>
      </add>
      <add name="Critical" switchValue="Critical">
        <listeners>
          <add name="CriticalLoggingListener" />
        </listeners>
      </add>
      <add name="Tracing" switchValue="ActivityTracing">
        <listeners>
          <add name="Tracing Custom Listener" />
        </listeners>
      </add>
      <!--<add name="Information" switchValue="Information">
				<listeners>
					<add name="File Listener" />
					<add name="Custom Listener" />
				</listeners>
			</add>
			
			<add name="Error" switchValue="Warning">
				<listeners>
					<add name="EventLog Listener" />
				</listeners>
			</add>
			-->
    </categorySources>
    <specialSources>
      <allEvents name="All Events" switchValue="All" />
      <notProcessed name="Unprocessed CategorySource" switchValue="All" />
      <errors name="Logging Errors &amp; Warnings" switchValue="All">
        <listeners>
          <add name="DebugLoggingListener" />
        </listeners>
      </errors>
    </specialSources>
    <listeners>
      <!-- DebugLoggingListener -->
      <add name="DebugLoggingListener" formatter="Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" traceOutputOptions="None" type="DragonSpark.Application.Logging.TraceListener, DragonSpark.Application" initializeData="" />
      <!-- InformationLoggingListener -->
      <add name="InformationLoggingListener" formatter="Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" traceOutputOptions="None" type="DragonSpark.Application.Logging.TraceListener, DragonSpark.Application" initializeData="" />
      <!-- WarningLoggingListener -->
      <add name="WarningLoggingListener" formatter="Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" traceOutputOptions="None" type="DragonSpark.Application.Logging.TraceListener, DragonSpark.Application" initializeData="" />
      <!-- ErrorLoggingListener -->
      <add name="ErrorLoggingListener" formatter="Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" traceOutputOptions="None" type="DragonSpark.Application.Logging.TraceListener, DragonSpark.Application" initializeData="" />
      <!-- CriticalLoggingListener -->
      <add name="CriticalLoggingListener" formatter="Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" traceOutputOptions="None" type="DragonSpark.Application.Logging.TraceListener, DragonSpark.Application" initializeData="" />
      <!-- Tracing Custom Listener -->
      <add name="Tracing Custom Listener" formatter="Tracing Text Formatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" traceOutputOptions="None" type="DragonSpark.Application.Logging.TraceListener, DragonSpark.Application" initializeData="" />
    </listeners>
    <formatters>
      <add name="Text Formatter" type="DragonSpark.Application.Logging.TextFormatter, DragonSpark.Application" template="[{timestamp}] - {message} -- CategorySource: {category}  Machine: {machine}  Context: {formatExtendedProperty(Context:Name)}" />
      <add name="Verbose Text Formatter" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging" template="Timestamp: {timestamp}&#xD;&#xA;Message: {message}&#xD;&#xA;CategorySource: {category}&#xD;&#xA;Priority: {priority}&#xD;&#xA;EventId: {eventid}&#xD;&#xA;Severity: {severity}&#xD;&#xA;Title:{title}&#xD;&#xA;Machine: {machine}&#xD;&#xA;Application Domain: {appDomain}&#xD;&#xA;Process Id: {processId}&#xD;&#xA;Process Name: {processName}&#xD;&#xA;Win32 Thread Id: {win32ThreadId}&#xD;&#xA;Thread Name: {threadName}&#xD;&#xA;Extended Properties: {dictionary({key} - {value}&#xD;&#xA;)}" />
      <add name="Tracing Text Formatter" type="DragonSpark.Application.Logging.TextFormatter, DragonSpark.Application" template="[{timestamp}] - {message} -- CategorySource: {category}  Machine: {machine}  Context: {formatExtendedProperty(Context:Name)}" />
    </formatters>
  </loggingConfiguration>
  <exceptionHandling>
    <exceptionPolicies>
      <add name="Default Exception Policy">
        <exceptionTypes>
          <add name="Exception" type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Handler" logCategory="Error" eventId="101" severity="Error" title="Unhandled DragonSpark Framework Testing Exception" priority="0" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" />
              <!--Add this handler to send the Exception ID (Guid) to the client for future sync up with the logged ID-->
              <add name="WrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" wrapExceptionType="System.ApplicationException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" exceptionMessage="{handlingInstanceID}" />
            </exceptionHandlers>
          </add>
          <add name="TestingException" type="DragonSpark.Testing.TestObjects.TestingException, DragonSpark.Testing" postHandlingAction="None">
            <exceptionHandlers>
              <add name="Logging Handler" logCategory="Error" eventId="101" severity="Error" title="Unhandled DragonSpark Framework Testing Exception" priority="0" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" />
            </exceptionHandlers>
          </add>
          <add name="FatalTestingException" type="DragonSpark.Testing.TestObjects.FatalTestingException, DragonSpark.Testing" postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="Logging Handler" logCategory="Critical" eventId="101" severity="Critical" title="Unhandled DragonSpark Framework Testing Exception" priority="0" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" />
              <!--<add name="ReplaceHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="An exception has occured.  Be afraid." replaceExceptionType="System.ApplicationException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />-->
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
  <!-- END ENTERPRISE LIBRARY CONFIGURATION. -->
  <system.serviceModel>
    <services>
      <service name="DragonSpark.Testing.TestObjects.Communication.TestingService">
        <endpoint address="" binding="wsHttpBinding" contract="DragonSpark.Testing.TestObjects.Communication.ITestingService">
          <identity>
            <dns value="localhost" />
          </identity>
        </endpoint>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost:6776/TestingService/" />
          </baseAddresses>
        </host>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
          <ServiceLocation factoryType="DragonSpark.Application.Communication.Configuration.ServiceLocatorInstanceFactory`1[[DragonSpark.Testing.Communications.Configuration.Container, DragonSpark.Testing]], DragonSpark.Application.Communication" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <extensions>
      <behaviorExtensions>
        <add name="ServiceLocation" type="DragonSpark.Application.Communication.Configuration.ServiceLocationElement, DragonSpark.Application.Communication" />
      </behaviorExtensions>
    </extensions>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true" />
  </system.serviceModel>
</configuration>