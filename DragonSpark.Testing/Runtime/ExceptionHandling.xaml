<ds:TestingContext x:Class="DragonSpark.Testing.Runtime.ExceptionHandling"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				   xmlns:reflection="clr-namespace:System.Reflection;assembly=mscorlib"
	xmlns:dragonSpark="clr-namespace:DragonSpark;assembly=DragonSpark"
    xmlns:logging="clr-namespace:DragonSpark.Logging;assembly=DragonSpark"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:testObjects="clr-namespace:DragonSpark.Testing.TestObjects"
    xmlns:markup="clr-namespace:DragonSpark.Markup;assembly=DragonSpark"
    xmlns:commands="clr-namespace:DragonSpark.IoC.Commands;assembly=DragonSpark"
    xmlns:exceptions="clr-namespace:DragonSpark.Exceptions;assembly=DragonSpark">
	<ds:AssignServiceLocatorCommand />
	<ds:RegisterFromMetadataCommand />
	<ds:LoggingConfiguration>
		<ds:EventListenerDefinition>
			<ds:Instance>
				<testObjects:TestEventListener Level="Informational" />
			</ds:Instance>
			<ds:EventListenerDefinition.Registrations>
                <markuprkup:DictionaryOfT KeyType="{x:Type system:Type}" TypeArgument="{x:Type logging:EventSourceRegistration}">
                 markup <ds:KeyValuePair Key="{x:Type logging:ILogger}">
                        <logging:EventSourceRegistration Level="Informational" />
                  markup</ds:KeyValuePair>
                </markup:DictionaryOfT>
			</ds:EventListenerDefinition.Registrations>
		</ds:EventListenerDefinition>
		<ds:EventListenerDefinition>
			<ds:Instance>
				<testObjects:TestEventListener Level="Warning" />
			</ds:Instance>
			<ds:EventListenerDefinition.Registrations>
                <markuprkup:DictionaryOfT KeyType="{x:Type system:Type}" TypeArgument="{x:Type logging:EventSourceRegistration}">
                 markup <ds:KeyValuePair Key="{x:Type logging:ILogger}">
                        <logging:EventSourceRegistration Level="Warning" />
                  markup</ds:KeyValuePair>
                </markup:DictionaryOfT>
			</ds:EventListenerDefinition.Registrations>
		</ds:EventListenerDefinition>
		<ds:EventListenerDefinition>
			<ds:Instance>
				<testObjects:TestEventListener Level="Error" />
			</ds:Instance>
			<ds:EventListenerDefinition.Registrations>
                <markuprkup:DictionaryOfT KeyType="{x:Type system:Type}" TypeArgument="{x:Type logging:EventSourceRegistration}">
                 markup <ds:KeyValuePair Key="{x:Type logging:ILogger}">
                        <logging:EventSourceRegistration Level="Error" />
                  markup</ds:KeyValuePair>
                </markup:DictionaryOfT>
			</ds:EventListenerDefinition.Registrations>
		</ds:EventListenerDefinition>
		<ds:EventListenerDefinition>
			<ds:Instance>
				<testObjects:TestEventListener Level="Critical" />
			</ds:Instance>
			<ds:EventListenerDefinition.Registrations>
                <markuprkup:DictionaryOfT KeyType="{x:Type system:Type}" TypeArgument="{x:Type logging:EventSourceRegistration}">
                 markup <ds:KeyValuePair Key="{x:Type logging:ILogger}">
                        <logging:EventSourceRegistration Level="Critical" />
                  markup</ds:KeyValuePair>
                </markup:DictionaryOfT>
			</ds:EventListenerDefinition.Registrations>
		</ds:EventListenerDefinition>
	</ds:LoggingConfiguration>
	
	<commands:ExceptionHandlingConfiguration>
		<markuprkup:ExceptionPolicyDefinition PolicyName="{x:Static exceptions:ExceptionHandler.DefaultExceptionPolicy}">
markup	<ds:ExceptionPolicyEntry  ExceptionType="{x:Type system:Exception}" Action="ThrowNewException">
				<exceptions:LogExceptionHandler />
	markup	<ds:WrapHandler WrapExceptionType="{x:Type system:ApplicationException}" Message="{}An exception was thrown. Context Id: {handlingInstanceID}" />
	markup</ds:ExceptionPolicyEntry>
markup	<ds:ExceptionPolicyEntry ExceptionType="{x:Type testObjects:TestingException}" Action="None">
				<exceptions:LogExceptionHandler />
	markup</ds:ExceptionPolicyEntry>
markup	<ds:ExceptionPolicyEntry ExceptionType="{x:Type testObjects:FatalTestingException}" Action="NotifyRethrow">
				<exceptions:LogFatalExceptionHandler />
	markup</ds:ExceptionPolicyEntry>
		</exceptions:ExceptionPolicyDefinition>
	</commands:ExceptionHandlingConfiguration>
	<commands:ApplicationConfigurationCommand>
		<commands:ApplicationConfigurationCommand.ApplicationDetails>
			<dragonSpark:ApplicationDetails
				Title="{markup:Metadata {x:Type reflection:AssemblyTitleAttribute}, 'Title'}"
				Product="{markup:Metadata {x:Type reflection:AssemblyProductAttribute}, 'Product'}"
				Company="{markup:Metadata {x:Type reflection:AssemblyCompanyAttribute}, 'Company'}"
				Description="{markup:Metadata {x:Type reflection:AssemblyDescriptionAttribute}, 'Description'}"
				Configuration="{markup:Metadata {x:Type reflection:AssemblyConfigurationAttribute}, 'Configuration'}"
				Copyright="{markup:Metadata {x:Type reflection:AssemblyCopyrightAttribute}, 'Copyright'}"
				Version="{markup:AssemblyVersion}"
					
				DeploymentDate="3/5/2013"
				CompanyUri="http://framework.dragonspark.us"
			/>
		</commands:ApplicationConfigurationCommand.ApplicationDetails>
	</ds:ApplicationConfigurationCommand>
</ds:TestingContext>